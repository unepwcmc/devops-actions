name: 'Kamal v2 Setup'
description: 'Setup and configure Kamal v2 deployment environment with comprehensive validation and best practices'
author: 'WCMC DevOps Team'

inputs:
  environment:
    description: 'Environment to setup (staging, production)'
    required: true
  kamal-version:
    description: 'Kamal version to install'
    required: false
    default: '2.5.3'
  ruby-version:
    description: 'Ruby version to use'
    required: false
    default: '3.3.5'
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22.3.0'
  buildx-version:
    description: 'Docker Buildx version to use'
    required: false
    default: 'v0.17.1'
  working-directory:
    description: 'Working directory for Rails application'
    required: false
    default: '.'
  dockerfile-path:
    description: 'Path to Dockerfile relative to working directory'
    required: false
    default: 'Dockerfile.deploy'
  kamal-config-path:
    description: 'Path to Kamal config file relative to working directory'
    required: false
    default: 'config/deploy.yml'
  database-port:
    description: 'Database port'
    required: false
    default: '5432'
  # Redis Configuration defaults
  redis-host:
    description: 'Redis host'
    required: false
    default: 'host.docker.internal'
  redis-port:
    description: 'Redis port'
    required: false
    default: '6379'
  redis-database:
    description: 'Redis database number for Sidekiq'
    required: false
    default: '1'
  # Project-specific Database Naming
  database-env-prefix:
    description: 'Database environment variable prefix (e.g., OCEAN_CENSUS, TARGET_TRACKER)'
    required: false
    default: 'TARGET_TRACKER'
  # Generic Additional Secrets
  additional-secrets:
    description: 'Additional secrets in KEY=VALUE format, one per line'
    required: false
  pre-setup-commands:
    description: 'Additional commands to run before setup'
    required: false
  post-setup-commands:
    description: 'Additional commands to run after setup'
    required: false
  enable-health-checks:
    description: 'Enable health checks during setup'
    required: false
    default: 'true'
  setup-timeout:
    description: 'Timeout for setup operation in minutes'
    required: false
    default: '30'

outputs:
  setup-status:
    description: 'Status of the setup operation'
    value: ${{ steps.setup-result.outputs.status }}
  setup-duration:
    description: 'Duration of the setup operation'
    value: ${{ steps.setup-result.outputs.duration }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "üîç Validating inputs..."

        # Validate environment
        if [[ ! "${{ inputs.environment }}" =~ ^(staging|production)$ ]]; then
          echo "‚ùå Error: environment must be either 'staging' or 'production'"
          exit 1
        fi

        # Validate working directory exists
        if [[ ! -d "${{ inputs.working-directory }}" ]]; then
          echo "‚ùå Error: working-directory '${{ inputs.working-directory }}' does not exist"
          exit 1
        fi

        # Validate required files
        dockerfile_path="${{ inputs.working-directory }}/${{ inputs.dockerfile-path }}"
        kamal_config_path="${{ inputs.working-directory }}/${{ inputs.kamal-config-path }}"

        if [[ ! -f "$dockerfile_path" ]]; then
          echo "‚ùå Error: Dockerfile not found at '$dockerfile_path'"
          exit 1
        fi

        if [[ ! -f "$kamal_config_path" ]]; then
          echo "‚ùå Error: Kamal config not found at '$kamal_config_path'"
          exit 1
        fi

        echo "‚úÖ Input validation completed"

    - name: Validate required environment variables
      shell: bash
      run: |
        echo "üîß Validating required environment variables for Kamal v2 setup..."
        
        # Core required secrets
        required_vars=(
          "KAMAL_REGISTRY_USERNAME"
          "KAMAL_REGISTRY_PASSWORD" 
          "SSH_PRIVATE_KEY"
          "RAILS_MASTER_KEY"
          "DATABASE_HOST"
          "DATABASE_NAME"
          "DATABASE_USERNAME"
          "DATABASE_PASSWORD"
        )

        missing_vars=()
        for var in "${required_vars[@]}"; do
          if [[ -z "${!var}" ]]; then
            missing_vars+=("$var")
          fi
        done

        if [[ ${#missing_vars[@]} -gt 0 ]]; then
          echo "‚ùå Error: Missing required environment variables:"
          printf '  - %s\n' "${missing_vars[@]}"
          echo ""
          echo "Please add these secrets to your GitHub environment (${{ inputs.environment }})"
          exit 1
        fi

        echo "‚úÖ All required environment variables are present"

        # Optional Rails-specific variables (for projects that need them)
        if [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST}" ]]; then
          echo "‚úÖ RAILS_DEFAULT_PUBLIC_APP_HOST is set"
        else
          echo "‚ÑπÔ∏è RAILS_DEFAULT_PUBLIC_APP_HOST not set (optional)"
        fi

        if [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL}" ]]; then
          echo "‚úÖ RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL is set"
        else
          echo "‚ÑπÔ∏è RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL not set (optional)"
        fi

        # Optional environment variables (will warn if missing but not fail)
        optional_vars=(
          "AWS_ACCESS_KEY_ID"
          "AWS_SECRET_ACCESS_KEY"
          "AWS_REGION"
          "REDIS_USERNAME"
          "REDIS_PASSWORD"
          "MAIL_USERNAME"
          "MAIL_PASSWORD"
          "AWS_S3_ACCESS_KEY_ID"
          "AWS_S3_SECRET_ACCESS_KEY"
          "AWS_S3_REGION"
          "AWS_S3_BUCKET_NAME"
          "FRONTEND_APP_NAME"
          "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID"
          "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET"
          "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID"
          "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET"
        )

        for var_name in "${optional_vars[@]}"; do
          if [[ -z "${!var_name}" ]]; then
            echo "‚ÑπÔ∏è  Optional: ${var_name} is not set (will be skipped)"
          else
            echo "‚úÖ Optional: ${var_name} is set"
          fi
        done

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install Yarn
      shell: bash
      run: |
        echo "üì¶ Installing Yarn..."
        npm install -g yarn
        yarn --version

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ inputs.ruby-version }}
        bundler-cache: false

    - name: Install PostgreSQL Client Libraries
      shell: bash
      run: |
        echo "üêò Installing PostgreSQL client libraries..."
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Install Kamal
      shell: bash
      run: |
        echo "üö¢ Installing Kamal v${{ inputs.kamal-version }}..."
        gem install kamal -v ${{ inputs.kamal-version }}
        kamal version

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

    - name: Test SSH connectivity
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîë Testing SSH connectivity..."
        # Extract hosts from Kamal config
        if command -v yq >/dev/null 2>&1; then
          hosts=$(yq eval '.servers.*[]' ${{ inputs.kamal-config-path }} 2>/dev/null || echo "")
        else
          # Fallback to grep if yq is not available
          hosts=$(grep -oP 'servers:.*?(\d+\.\d+\.\d+\.\d+)' ${{ inputs.kamal-config-path }} || echo "")
        fi

        if [[ -n "$hosts" ]]; then
          for host in $hosts; do
            echo "Testing connection to $host..."
            ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no $host "echo 'SSH connection successful to $host'" || echo "‚ö†Ô∏è Warning: Could not connect to $host"
          done
        else
          echo "‚ÑπÔ∏è No hosts found in config for SSH testing"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        version: ${{ inputs.buildx-version }}

    - name: Verify and Configure Buildx
      shell: bash
      run: |
        echo "üê≥ Configuring Docker Buildx..."
        if ! docker buildx version; then
          echo "‚ùå Error: Buildx not installed correctly"
          exit 1
        fi

        # Create and use buildx instance
        docker buildx create --name kamal-builder --driver docker-container --use 2>/dev/null || docker buildx use kamal-builder
        docker buildx inspect --bootstrap
        echo "‚úÖ Buildx version: $(docker buildx version)"

    - name: Create Kamal secrets file
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîê Creating Kamal secrets file..."
        mkdir -p .kamal
        secrets_file=".kamal/secrets.${{ inputs.environment }}"

        # Create secrets file with proper permissions
        touch "$secrets_file"
        chmod 600 "$secrets_file"

        # Base secrets
        cat <<EOF > "$secrets_file"
        KAMAL_REGISTRY_USERNAME=${KAMAL_REGISTRY_USERNAME}
        KAMAL_REGISTRY_PASSWORD=${KAMAL_REGISTRY_PASSWORD}
        RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
        ${{ inputs.database-env-prefix }}_DATABASE_HOSTNAME=${DATABASE_HOST}
        ${{ inputs.database-env-prefix }}_DATABASE_NAME=${DATABASE_NAME}
        ${{ inputs.database-env-prefix }}_DATABASE_USERNAME=${DATABASE_USERNAME}
        ${{ inputs.database-env-prefix }}_DATABASE_PASSWORD=${DATABASE_PASSWORD}
        ${{ inputs.database-env-prefix }}_DATABASE_PORT=${{ inputs.database-port }}
        EOF

        # Add Rails host configuration if available
        if [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST}" ]]; then
          echo "RAILS_DEFAULT_PUBLIC_APP_HOST=${RAILS_DEFAULT_PUBLIC_APP_HOST}" >> "$secrets_file"
        fi

        if [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL}" ]]; then
          echo "RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL=${RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL}" >> "$secrets_file"
        fi

        # Add Redis configuration if provided
        if [[ -n "${REDIS_USERNAME}" && -n "${REDIS_PASSWORD}" ]]; then
          echo "REDIS_USERNAME=${REDIS_USERNAME}" >> "$secrets_file"
          echo "REDIS_PASSWORD=${REDIS_PASSWORD}" >> "$secrets_file"
          echo "SIDEKIQ_REDIS_URL=redis://${REDIS_USERNAME}:${REDIS_PASSWORD}@${{ inputs.redis-host }}:${{ inputs.redis-port }}/${{ inputs.redis-database }}" >> "$secrets_file"
          echo "‚úÖ Added Redis configuration with Sidekiq URL"
        fi

        # Add Mail configuration if provided
        if [[ -n "${MAIL_USERNAME}" && -n "${MAIL_PASSWORD}" ]]; then
          echo "MAIL_USERNAME=${MAIL_USERNAME}" >> "$secrets_file"
          echo "MAIL_PASSWORD=${MAIL_PASSWORD}" >> "$secrets_file"
          echo "‚úÖ Added Mail server configuration"
        fi

        # Add AWS general secrets if provided
        if [[ -n "${AWS_ACCESS_KEY_ID}" ]]; then
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> "$secrets_file"
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> "$secrets_file"
          echo "AWS_REGION=${AWS_REGION}" >> "$secrets_file"
          echo "‚úÖ Added AWS general configuration"
        fi

        # Add AWS S3 specific secrets if provided
        if [[ -n "${AWS_S3_ACCESS_KEY_ID}" ]]; then
          echo "AWS_S3_ACCESS_KEY_ID=${AWS_S3_ACCESS_KEY_ID}" >> "$secrets_file"
          echo "AWS_S3_SECRET_ACCESS_KEY=${AWS_S3_SECRET_ACCESS_KEY}" >> "$secrets_file"
          echo "AWS_S3_REGION=${AWS_S3_REGION}" >> "$secrets_file"
          echo "AWS_S3_NAME=${AWS_S3_BUCKET_NAME}" >> "$secrets_file"
          echo "‚úÖ Added AWS S3 configuration"
        fi

        # Add Frontend Integration if provided
        if [[ -n "${FRONTEND_APP_NAME}" ]]; then
          echo "FRONTEND_APP_NAME=${FRONTEND_APP_NAME}" >> "$secrets_file"
          echo "‚úÖ Added Frontend integration configuration"
        fi

        # Add Azure AD configuration if provided
        if [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID}" ]]; then
          echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID}" >> "$secrets_file"
          echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET}" >> "$secrets_file"
          echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID}" >> "$secrets_file"
          echo "‚úÖ Added Azure AD configuration for WCMC User Management"
        fi

        # Add WCMC User Management configuration if provided
        if [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET}" ]]; then
          echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET}" >> "$secrets_file"
          echo "‚úÖ Added WCMC User Management configuration"
        fi

        # Add additional secrets if provided
        if [[ -n "${{ inputs.additional-secrets }}" ]]; then
          echo "" >> "$secrets_file"
          echo "# Additional project-specific secrets" >> "$secrets_file"
          echo "${{ inputs.additional-secrets }}" >> "$secrets_file"
          echo "‚úÖ Added additional project-specific secrets"
        fi

        echo "‚úÖ Secrets file created with $(wc -l < "$secrets_file") entries"

    - name: Run pre-setup commands
      if: inputs.pre-setup-commands != ''
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Running pre-setup commands..."
        ${{ inputs.pre-setup-commands }}

    - name: Validate Kamal configuration
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "‚úÖ Validating Kamal configuration..."
        # Load secrets
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)

        # Validate config
        kamal config validate -c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }}

    - name: Run Kamal setup with timeout
      id: kamal-setup
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üöÄ Starting Kamal setup for ${{ inputs.environment }}..."
        start_time=$(date +%s)

        # Load secrets
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)

        # Run setup with verbose output
        if kamal setup --verbose -c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }}; then
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "setup-duration=${duration}" >> $GITHUB_OUTPUT
          echo "setup-status=success" >> $GITHUB_OUTPUT
          echo "‚úÖ Kamal setup completed successfully in ${duration} seconds"
        else
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "setup-duration=${duration}" >> $GITHUB_OUTPUT
          echo "setup-status=failed" >> $GITHUB_OUTPUT
          echo "‚ùå Kamal setup failed after ${duration} seconds"
          exit 1
        fi

    - name: Run health checks
      if: inputs.enable-health-checks == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üè• Running health checks..."
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)

        # Check if containers are running
        kamal ps -c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }}

        # Check application health if health check endpoint is configured
        if grep -q "healthcheck" ${{ inputs.kamal-config-path }}; then
          echo "üîç Checking application health endpoints..."
          # Add specific health check logic here based on your app's health endpoint
        fi

    - name: Run post-setup commands
      if: inputs.post-setup-commands != ''
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Running post-setup commands..."
        ${{ inputs.post-setup-commands }}

    - name: Set setup result
      id: setup-result
      if: always()
      shell: bash
      run: |
        if [[ "${{ steps.kamal-setup.outcome }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

        # Get duration from setup step or calculate fallback
        duration="${{ steps.kamal-setup.outputs.setup-duration }}"
        if [[ -z "$duration" ]]; then
          duration="unknown"
        fi
        echo "duration=${duration}" >> $GITHUB_OUTPUT

    - name: Cleanup on failure
      if: failure()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üßπ Cleaning up after failure..."
        # Remove secrets file
        rm -f .kamal/secrets.${{ inputs.environment }}

        # Clean up Docker resources
        docker system prune -f || true

        echo "‚úÖ Cleanup completed"

branding:
  icon: 'settings'
  color: 'green'
