name: 'Nuxt Kamal v2 Setup'
description: 'Setup Nuxt frontend applications with Kamal v2 for initial deployment preparation with enhanced features and validation'
author: 'WCMC DevOps Team'

inputs:
  environment:
    description: 'Environment to setup (staging, production)'
    required: true
  kamal-version:
    description: 'Kamal v2 version to use'
    required: false
    default: '2.5.3'
  ruby-version:
    description: 'Ruby version to use'
    required: false
    default: '3.3.5'
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22.3.0'
  working-directory:
    description: 'Working directory for Nuxt application'
    required: false
    default: '.'
  # Optional configurations
  additional-env-vars:
    description: 'Additional environment variables in KEY=VALUE format, one per line'
    required: false
  pre-setup-commands:
    description: 'Commands to run before setup'
    required: false
  post-setup-commands:
    description: 'Commands to run after successful setup'
    required: false
  setup-verbose:
    description: 'Enable verbose output for Kamal setup'
    required: false
    default: 'true'
  health-check-enabled:
    description: 'Enable health checks during setup'
    required: false
    default: 'true'
  rollback-on-failure:
    description: 'Enable automatic rollback on setup failure'
    required: false
    default: 'false'

outputs:
  setup-status:
    description: 'Status of the setup operation'
    value: ${{ steps.setup-result.outputs.status }}
  setup-duration:
    description: 'Duration of the setup operation in seconds'
    value: ${{ steps.setup-result.outputs.duration }}
  start-time:
    description: 'Setup start time'
    value: ${{ steps.set-times.outputs.start-time }}
  end-time:
    description: 'Setup end time'
    value: ${{ steps.set-times.outputs.end-time }}
  config-path:
    description: 'Path to the generated Kamal configuration'
    value: ${{ steps.setup-result.outputs.config-path }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "🔍 Validating Nuxt Kamal v2 setup inputs..."

        # Validate environment
        if [[ ! "${{ inputs.environment }}" =~ ^(staging|production)$ ]]; then
          echo "❌ Error: environment must be either 'staging' or 'production'"
          exit 1
        fi

        # Validate working directory
        if [[ ! -d "${{ inputs.working-directory }}" ]]; then
          echo "❌ Error: working-directory '${{ inputs.working-directory }}' does not exist"
          exit 1
        fi

        echo "✅ Input validation completed for Nuxt Kamal v2 setup"

    - name: Set setup times
      id: set-times
      shell: bash
      run: |
        start_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "start-time=${start_time}" >> $GITHUB_OUTPUT
        echo "START_TIME=${start_time}" >> $GITHUB_ENV
        echo "🕐 Kamal v2 setup started at: ${start_time}"

    - name: Validate required environment variables
      shell: bash
      run: |
        echo "🔧 Validating required environment variables for Kamal v2 setup..."
        
        # Core required variables for any Nuxt Kamal deployment
        required_vars=(
          "GH_TOKEN"
          "KAMAL_REGISTRY_PASSWORD"
          "KAMAL_REGISTRY_USERNAME"
          "SSH_PRIVATE_KEY"
          "WEB_SERVER_DNS_NAME"
          "FRONTEND_APP_NAME"
        )

        # Optional variables that enhance functionality but aren't strictly required
        optional_vars=(
          "AUTH_ORIGIN"
          "NUXT_PUBLIC_RAILS_API_SERVER"
          "RAILS_MASTER_KEY"
          "RAILS_DEFAULT_PUBLIC_APP_HOST"
          "RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL"
          "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID"
          "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET"
          "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID"
          "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET"
          "NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER"
        )

        # Validate required variables
        echo "Checking core required variables..."
        for var_name in "${required_vars[@]}"; do
          if [[ -z "${!var_name}" ]]; then
            echo "❌ Error: ${var_name} is not set or empty"
            echo "Please add this secret to your GitHub environment (${{ inputs.environment }})"
            exit 1
          else
            echo "✅ ${var_name} is set"
          fi
        done

        # Check optional variables (warn but don't fail)
        echo "Checking optional variables..."
        for var_name in "${optional_vars[@]}"; do
          if [[ -z "${!var_name}" ]]; then
            echo "⚠️  ${var_name} is not set (optional - continuing without it)"
          else
            echo "✅ ${var_name} is set"
          fi
        done

        echo "✅ Environment variable validation completed"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install Yarn
      shell: bash
      run: |
        echo "📦 Installing Yarn..."
        npm install -g yarn
        yarn --version

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ inputs.ruby-version }}
        bundler-cache: true

    - name: Install Kamal v2
      shell: bash
      run: |
        echo "🚢 Installing Kamal v${{ inputs.kamal-version }}..."
        gem install kamal -v ${{ inputs.kamal-version }}
        kamal version
        echo "✅ Kamal v2 installed successfully"

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

    - name: Test SSH connection
      shell: bash
      run: |
        echo "🔐 Testing SSH connection to deployment server..."
        if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -T wcmc@${{ env.WEB_SERVER_DNS_NAME }} echo "SSH connection successful"; then
          echo "✅ SSH connection successful"
        else
          echo "❌ SSH connection failed"
          exit 1
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        version: v0.17.1

    - name: Verify Docker Buildx setup
      shell: bash
      run: |
        echo "🐳 Verifying Docker Buildx setup..."
        if ! docker buildx version; then
          echo "❌ Error: Buildx not installed correctly"
          exit 1
        fi
        docker buildx create --name mybuilder --driver docker-container --use || docker buildx use mybuilder
        docker buildx inspect --bootstrap
        echo "✅ Docker Buildx configured successfully"

    - name: Create environment-specific .env file for Nuxt Frontend
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔐 Creating environment-specific .env file for Nuxt Frontend with Kamal v2..."

        env_file=".env.${{ inputs.environment }}"

        # Create .env file with safe handling of optional variables
        {
          echo "# Generated by Nuxt Kamal v2 Setup Action at $(date -u)"
          echo ""
          echo "# Frontend Application Configuration"
          echo "FRONTEND_APP_NAME=${FRONTEND_APP_NAME}"
          
          # Optional variables - only add if they exist
          [[ -n "${AUTH_ORIGIN:-}" ]] && echo "AUTH_ORIGIN=${AUTH_ORIGIN}"
          [[ -n "${NUXT_PUBLIC_RAILS_API_SERVER:-}" ]] && echo "NUXT_PUBLIC_RAILS_API_SERVER=${NUXT_PUBLIC_RAILS_API_SERVER}"
          
          echo ""
          echo "# Rails API Integration (optional)"
          [[ -n "${RAILS_MASTER_KEY:-}" ]] && echo "RAILS_MASTER_KEY=${RAILS_MASTER_KEY}"
          [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST:-}" ]] && echo "RAILS_DEFAULT_PUBLIC_APP_HOST=${RAILS_DEFAULT_PUBLIC_APP_HOST}"
          [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL:-}" ]] && echo "RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL=${RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL}"
          
          echo ""
          echo "# Azure AD Configuration (optional)"
          [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID:-}" ]] && echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID}"
          [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET:-}" ]] && echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET}"
          [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID:-}" ]] && echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID}"
          
          echo ""
          echo "# WCMC User Management Module (optional)"
          [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET:-}" ]] && echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET}"
          [[ -n "${NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER:-}" ]] && echo "NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER=${NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER}"
          
          echo ""
          echo "# Kamal v2 Configuration"
          echo "KAMAL_REGISTRY_USERNAME=${KAMAL_REGISTRY_USERNAME}"
          echo "KAMAL_REGISTRY_PASSWORD=${KAMAL_REGISTRY_PASSWORD}"
          
          echo ""
          echo "# Environment"
          echo "NODE_ENV=${{ inputs.environment }}"
          echo "ENVIRONMENT=${{ inputs.environment }}"
        } > "$env_file"

        # Add additional environment variables if provided
        if [[ -n "${{ inputs.additional-env-vars }}" ]]; then
          echo "" >> "$env_file"
          echo "# Additional Environment Variables" >> "$env_file"
          echo "${{ inputs.additional-env-vars }}" >> "$env_file"
        fi

        echo "✅ Environment file created: $env_file"

        # Secure the file
        chmod 600 "$env_file"

        # Display file content (masking sensitive values)
        echo "📋 Environment file content:"
        sed 's/=.*/=***/' "$env_file"

    - name: Run pre-setup commands
      if: inputs.pre-setup-commands != ''
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔧 Running pre-setup commands..."
        ${{ inputs.pre-setup-commands }}
        echo "✅ Pre-setup commands completed"

    - name: Create Kamal v2 secrets file
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔐 Creating Kamal v2 secrets file..."

        # Create .kamal directory if it doesn't exist
        mkdir -p .kamal

        secrets_file=".kamal/secrets"

        # Create secrets file with safe handling of optional variables
        {
          echo "# Generated by Nuxt Kamal v2 Setup Action at $(date -u)"
          echo ""
          echo "# Registry Configuration"
          echo "KAMAL_REGISTRY_USERNAME=${KAMAL_REGISTRY_USERNAME}"
          echo "KAMAL_REGISTRY_PASSWORD=${KAMAL_REGISTRY_PASSWORD}"
          
          echo ""
          echo "# Frontend Application Configuration"
          echo "FRONTEND_APP_NAME=${FRONTEND_APP_NAME}"
          
          # Optional variables - only add if they exist
          [[ -n "${AUTH_ORIGIN:-}" ]] && echo "AUTH_ORIGIN=${AUTH_ORIGIN}"
          [[ -n "${NUXT_PUBLIC_RAILS_API_SERVER:-}" ]] && echo "NUXT_PUBLIC_RAILS_API_SERVER=${NUXT_PUBLIC_RAILS_API_SERVER}"
          
          echo ""
          echo "# Rails API Integration (optional)"
          [[ -n "${RAILS_MASTER_KEY:-}" ]] && echo "RAILS_MASTER_KEY=${RAILS_MASTER_KEY}"
          [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST:-}" ]] && echo "RAILS_DEFAULT_PUBLIC_APP_HOST=${RAILS_DEFAULT_PUBLIC_APP_HOST}"
          [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL:-}" ]] && echo "RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL=${RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL}"
          
          echo ""
          echo "# Azure AD Configuration (optional)"
          [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID:-}" ]] && echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID}"
          [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET:-}" ]] && echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET}"
          [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID:-}" ]] && echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID}"
          
          echo ""
          echo "# WCMC User Management Module (optional)"
          [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET:-}" ]] && echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET}"
          [[ -n "${NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER:-}" ]] && echo "NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER=${NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER}"
          
          echo ""
          echo "# Environment Configuration"
          echo "NODE_ENV=${{ inputs.environment }}"
          echo "ENVIRONMENT=${{ inputs.environment }}"
        } > "$secrets_file"

        # Add additional environment variables if provided
        if [[ -n "${{ inputs.additional-env-vars }}" ]]; then
          echo "" >> "$secrets_file"
          echo "# Additional Environment Variables" >> "$secrets_file"
          echo "${{ inputs.additional-env-vars }}" >> "$secrets_file"
        fi

        # Secure the secrets file
        chmod 600 "$secrets_file"
        echo "✅ Kamal v2 secrets file created with proper permissions"

    - name: Create Kamal v2 configuration
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔧 Creating Kamal v2 configuration for ${{ inputs.environment }}..."

        # Create config directory if it doesn't exist
        mkdir -p config

        config_file="config/deploy.${{ inputs.environment }}.yml"

        # Create environment-specific Kamal v2 configuration
        cat > "$config_file" << 'EOF'
        # Kamal v2 configuration for ${{ inputs.environment }} environment
        # Generated by Nuxt Kamal v2 Setup Action

        service: <%= ENV["FRONTEND_APP_NAME"] %>

        # Docker image configuration
        image: ghcr.io/unepwcmc/<%= ENV["FRONTEND_APP_NAME"] %>

        # Registry configuration
        registry:
          username: <%= ENV["KAMAL_REGISTRY_USERNAME"] %>
          password: <%= ENV["KAMAL_REGISTRY_PASSWORD"] %>

        # Server configuration
        servers:
          web:
            - <%= ENV["WEB_SERVER_DNS_NAME"] %>

        # Environment configuration
        env:
          clear:
            NODE_ENV: ${{ inputs.environment }}
            ENVIRONMENT: ${{ inputs.environment }}
          secret:
            - FRONTEND_APP_NAME
            - KAMAL_REGISTRY_USERNAME
            - KAMAL_REGISTRY_PASSWORD
            <% if ENV["AUTH_ORIGIN"] %>- AUTH_ORIGIN<% end %>
            <% if ENV["NUXT_PUBLIC_RAILS_API_SERVER"] %>- NUXT_PUBLIC_RAILS_API_SERVER<% end %>
            <% if ENV["RAILS_MASTER_KEY"] %>- RAILS_MASTER_KEY<% end %>
            <% if ENV["RAILS_DEFAULT_PUBLIC_APP_HOST"] %>- RAILS_DEFAULT_PUBLIC_APP_HOST<% end %>
            <% if ENV["RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL"] %>- RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL<% end %>
            <% if ENV["NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID"] %>- NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID<% end %>
            <% if ENV["NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET"] %>- NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET<% end %>
            <% if ENV["NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID"] %>- NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID<% end %>
            <% if ENV["NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET"] %>- NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET<% end %>
            <% if ENV["NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER"] %>- NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER<% end %>

        # SSH configuration
        ssh:
          user: wcmc

        # Builder configuration for Nuxt applications
        builder:
          dockerfile: Dockerfile
          context: .

        # Health check configuration
        healthcheck:
          path: "/api/health"
          port: 3000
          max_attempts: 7
          interval: 20s

        # Traefik configuration (if using)
        traefik:
          host: <%= ENV["WEB_SERVER_DNS_NAME"] %>

        # Logging configuration
        logging:
          driver: json-file
          options:
            max-size: "10m"
            max-file: "3"

        # Asset configuration for Nuxt
        asset_path: /app/public
        EOF

        echo "✅ Kamal v2 configuration created: $config_file"

    - name: Verify Kamal v2 configuration
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔍 Verifying Kamal v2 configuration..."

        config_file="config/deploy.${{ inputs.environment }}.yml"

        # Check for required Kamal v2 configuration files
        if [[ ! -f "$config_file" ]]; then
          echo "❌ Error: $config_file not found"
          exit 1
        else
          echo "✅ Kamal v2 configuration file exists: $config_file"
        fi

        # Verify secrets file
        if [[ -f ".kamal/secrets" ]]; then
          echo "✅ Kamal v2 secrets file exists"
        else
          echo "❌ Error: Kamal v2 secrets file was not created"
          exit 1
        fi

        # Test Kamal v2 configuration syntax
        echo "🔧 Testing Kamal v2 configuration syntax..."
        if kamal config --destination ${{ inputs.environment }} 2>/dev/null; then
          echo "✅ Kamal v2 configuration is valid"
        else
          echo "⚠️  Warning: Kamal v2 configuration may have issues"
        fi

    - name: Run Kamal v2 setup
      id: kamal-setup
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🚀 Running Kamal v2 setup for ${{ inputs.environment }} environment..."

        # Set verbose flag
        verbose_flag=""
        if [[ "${{ inputs.setup-verbose }}" == "true" ]]; then
          verbose_flag="--verbose"
        fi

        # Perform Kamal v2 setup with environment-specific destination
        if kamal setup --destination ${{ inputs.environment }} $verbose_flag; then
          echo "✅ Kamal v2 setup completed successfully for ${{ inputs.environment }}"
          echo "setup_status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Kamal v2 setup failed for ${{ inputs.environment }}"
          echo "setup_status=failed" >> $GITHUB_OUTPUT

          if [[ "${{ inputs.rollback-on-failure }}" == "true" ]]; then
            echo "🔄 Attempting rollback due to setup failure..."
            kamal rollback --destination ${{ inputs.environment }} || echo "⚠️  Rollback failed or not applicable"
          fi

          exit 1
        fi

    - name: Perform health checks
      if: inputs.health-check-enabled == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🏥 Performing post-setup health checks for ${{ inputs.environment }}..."

        # Check if services are running (Kamal v2 syntax with environment)
        if kamal app details --destination ${{ inputs.environment }} 2>/dev/null; then
          echo "✅ Application services are running in ${{ inputs.environment }}"
        else
          echo "⚠️  Warning: Could not verify application services status for ${{ inputs.environment }}"
        fi

        # Additional health checks can be added here
        echo "✅ Health checks completed for ${{ inputs.environment }}"

    - name: Run post-setup commands
      if: inputs.post-setup-commands != ''
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔧 Running post-setup commands..."
        ${{ inputs.post-setup-commands }}
        echo "✅ Post-setup commands completed"

    - name: Set end time and calculate duration
      id: setup-result
      if: always()
      shell: bash
      run: |
        end_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "end-time=${end_time}" >> $GITHUB_OUTPUT

        # Calculate duration
        start_timestamp=$(date -d "${{ steps.set-times.outputs.start-time }}" +%s)
        end_timestamp=$(date -d "${end_time}" +%s)
        duration=$((end_timestamp - start_timestamp))

        echo "duration=${duration}" >> $GITHUB_OUTPUT
        echo "config-path=${{ inputs.working-directory }}/config/deploy.${{ inputs.environment }}.yml" >> $GITHUB_OUTPUT

        if [[ "${{ steps.kamal-setup.outputs.setup_status }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

        echo "🕐 Kamal v2 setup ended at: ${end_time}"
        echo "⏱️  Total setup duration: ${duration} seconds"

    - name: Cleanup sensitive files
      if: always()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🧹 Cleaning up temporary files..."

        # Note: We keep .kamal/secrets as it's needed for deployments
        # but ensure it has proper permissions
        if [[ -f ".kamal/secrets" ]]; then
          chmod 600 .kamal/secrets
        fi

        echo "✅ Cleanup completed"
