name: 'Nuxt Kamal v2 Setup'
description: 'Setup Nuxt frontend applications with Kamal v2 using existing project configuration - requires validate-secrets action first'
author: 'WCMC DevOps Team'

inputs:
  environment:
    description: 'Environment to setup (staging, production)'
    required: true
  kamal-version:
    description: 'Kamal v2 version to use'
    required: false
    default: '2.5.3'
  ruby-version:
    description: 'Ruby version to use'
    required: false
    default: '3.3.5'
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22.3.0'
  working-directory:
    description: 'Working directory for Nuxt application'
    required: false
    default: '.'
  # Optional configurations
  pre-setup-commands:
    description: 'Commands to run before setup'
    required: false
  post-setup-commands:
    description: 'Commands to run after successful setup'
    required: false
  setup-verbose:
    description: 'Enable verbose output for Kamal setup'
    required: false
    default: 'true'
  health-check-enabled:
    description: 'Enable health checks during setup'
    required: false
    default: 'true'
  rollback-on-failure:
    description: 'Enable automatic rollback on setup failure'
    required: false
    default: 'false'

outputs:
  setup-status:
    description: 'Status of the setup operation'
    value: ${{ steps.setup-result.outputs.status }}
  setup-duration:
    description: 'Duration of the setup operation in seconds'
    value: ${{ steps.setup-result.outputs.duration }}
  start-time:
    description: 'Setup start time'
    value: ${{ steps.set-times.outputs.start-time }}
  end-time:
    description: 'Setup end time'
    value: ${{ steps.set-times.outputs.end-time }}
  kamal-version-used:
    description: 'Version of Kamal that was used'
    value: ${{ steps.setup-result.outputs.kamal-version }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs and environment
      shell: bash
      run: |
        echo "üîç Validating Nuxt Kamal v2 setup inputs..."

        # Validate environment
        if [[ ! "${{ inputs.environment }}" =~ ^(staging|production)$ ]]; then
          echo "‚ùå Error: environment must be either 'staging' or 'production'"
          exit 1
        fi

        # Validate working directory
        if [[ ! -d "${{ inputs.working-directory }}" ]]; then
          echo "‚ùå Error: working-directory '${{ inputs.working-directory }}' does not exist"
          exit 1
        fi

        echo "‚úÖ Input validation completed for Nuxt Kamal v2 setup"

    - name: Validate required environment variables
      shell: bash
      run: |
        echo "üîß Validating required environment variables..."
        
        # Core required secrets (should be populated by validate-secrets action)
        required_vars=(
          "KAMAL_REGISTRY_USERNAME"
          "KAMAL_REGISTRY_PASSWORD" 
          "SSH_PRIVATE_KEY"
        )

        missing_vars=()
        for var in "${required_vars[@]}"; do
          if [[ -z "${!var}" ]]; then
            missing_vars+=("$var")
          fi
        done

        if [[ ${#missing_vars[@]} -gt 0 ]]; then
          echo "‚ùå Error: Missing required environment variables:"
          printf '  - %s\n' "${missing_vars[@]}"
          echo ""
          echo "üí° Ensure you run the 'validate-secrets' action before this step:"
          echo "   - name: Validate and Populate Secrets"
          echo "     uses: unepwcmc/devops-actions/.github/actions/validate-secrets@v1"
          echo "     with:"
          echo "       secrets-file: '.kamal/secrets-common'"
          echo "       environment: '${{ inputs.environment }}'"
          exit 1
        fi

        echo "‚úÖ All required environment variables are present"

    - name: Set setup times
      id: set-times
      shell: bash
      run: |
        start_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "start-time=${start_time}" >> $GITHUB_OUTPUT
        echo "START_TIME=${start_time}" >> $GITHUB_ENV
        echo "üïê Kamal v2 setup started at: ${start_time}"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install Yarn
      shell: bash
      run: |
        echo "üì¶ Installing Yarn..."
        npm install -g yarn
        yarn --version

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ inputs.ruby-version }}
        bundler-cache: true

    - name: Install Kamal v2
      shell: bash
      run: |
        echo "üö¢ Installing Kamal v${{ inputs.kamal-version }}..."
        gem install kamal -v ${{ inputs.kamal-version }}
        kamal version
        echo "‚úÖ Kamal v2 installed successfully"

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

    - name: Test SSH connection
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîê Testing SSH connection to deployment servers..."
        
        # Try to extract server info from Kamal config for testing
        if command -v kamal &> /dev/null && [[ -f "config/deploy.${{ inputs.environment }}.yml" || -f "config/deploy.yml" ]]; then
          # Test SSH connectivity using Kamal
          if kamal server exec --destination ${{ inputs.environment }} "echo 'SSH connection successful'" 2>/dev/null; then
            echo "‚úÖ SSH connection test successful"
          else
            echo "‚ö†Ô∏è  SSH connectivity test failed - this may affect setup"
            echo "Please ensure SSH access is configured properly"
          fi
        else
          echo "‚ÑπÔ∏è  Skipping SSH test - Kamal config not yet available"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        version: v0.17.1

    - name: Verify Docker Buildx setup
      shell: bash
      run: |
        echo "üê≥ Verifying Docker Buildx setup..."
        docker buildx version
        docker buildx create --name mybuilder --driver docker-container --use || docker buildx use mybuilder
        docker buildx inspect --bootstrap
        echo "‚úÖ Docker Buildx configured successfully"

    - name: Validate project configuration
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîç Validating project Kamal configuration..."

        # Check for Kamal configuration file
        config_file="config/deploy.${{ inputs.environment }}.yml"
        fallback_config="config/deploy.yml"

        if [[ -f "$config_file" ]]; then
          echo "‚úÖ Found environment-specific config: $config_file"
          CONFIG_FILE="$config_file"
        elif [[ -f "$fallback_config" ]]; then
          echo "‚úÖ Found general config: $fallback_config"
          CONFIG_FILE="$fallback_config"
        else
          echo "‚ùå Error: No Kamal configuration found"
          echo "Please ensure one of these files exists:"
          echo "  - $config_file (recommended for environment-specific config)"
          echo "  - $fallback_config (general config)"
          exit 1
        fi

        # Check for secrets template
        if [[ ! -f ".kamal/secrets-common" ]]; then
          echo "‚ùå Error: .kamal/secrets-common template not found"
          echo "Please create this file with your secret variable templates"
          echo "Example:"
          echo "  KAMAL_REGISTRY_USERNAME=\$KAMAL_REGISTRY_USERNAME"
          echo "  KAMAL_REGISTRY_PASSWORD=\$KAMAL_REGISTRY_PASSWORD"
          exit 1
        fi

        echo "‚úÖ Project configuration validation passed"

    - name: Create Kamal secrets file
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üìù Creating Kamal secrets file from environment variables..."
        
        # Ensure .kamal directory exists
        mkdir -p .kamal
        
        # Create secrets file from environment variables
        cp .kamal/secrets-common .kamal/secrets
        
        # Replace environment variable references with actual values
        while IFS= read -r line; do
          if [[ $line =~ ^([^#=]+)=\$([^=]+)$ ]]; then
            var_name="${BASH_REMATCH[1]}"
            env_var="${BASH_REMATCH[2]}"
            if [[ -n "${!env_var}" ]]; then
              sed -i "s|${var_name}=\$${env_var}|${var_name}=${!env_var}|g" .kamal/secrets
            fi
          fi
        done < .kamal/secrets-common
        
        # Secure the secrets file
        chmod 600 .kamal/secrets
        echo "‚úÖ Kamal secrets file created and secured"

    - name: Validate Kamal configuration syntax
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Validating Kamal v2 configuration syntax..."
        
        if kamal config --destination ${{ inputs.environment }} 2>/dev/null; then
          echo "‚úÖ Kamal v2 configuration is valid for ${{ inputs.environment }}"
        else
          echo "‚ùå Error: Kamal v2 configuration has syntax errors for ${{ inputs.environment }}"
          echo "Please check your config/deploy.${{ inputs.environment }}.yml file"
          exit 1
        fi

    - name: Run pre-setup commands
      if: inputs.pre-setup-commands != ''
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Running pre-setup commands..."
        ${{ inputs.pre-setup-commands }}
        echo "‚úÖ Pre-setup commands completed"

    - name: Run Kamal v2 setup
      id: kamal-setup
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üöÄ Running Kamal v2 setup for ${{ inputs.environment }} environment..."

        # Set verbose flag
        verbose_flag=""
        if [[ "${{ inputs.setup-verbose }}" == "true" ]]; then
          verbose_flag="--verbose"
        fi

        # Perform Kamal v2 setup with environment-specific destination
        if kamal setup --destination ${{ inputs.environment }} $verbose_flag; then
          echo "‚úÖ Kamal v2 setup completed successfully for ${{ inputs.environment }}"
          echo "setup_status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Kamal v2 setup failed for ${{ inputs.environment }}"
          echo "setup_status=failed" >> $GITHUB_OUTPUT

          if [[ "${{ inputs.rollback-on-failure }}" == "true" ]]; then
            echo "üîÑ Attempting rollback due to setup failure..."
            kamal rollback --destination ${{ inputs.environment }} || echo "‚ö†Ô∏è  Rollback failed or not applicable"
          fi

          exit 1
        fi

    - name: Perform health checks
      if: inputs.health-check-enabled == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üè• Performing post-setup health checks for ${{ inputs.environment }}..."

        # Check if services are running (Kamal v2 syntax with environment)
        if kamal app details --destination ${{ inputs.environment }} 2>/dev/null; then
          echo "‚úÖ Application services are running in ${{ inputs.environment }}"
        else
          echo "‚ö†Ô∏è  Warning: Could not verify application services status for ${{ inputs.environment }}"
        fi

        # Additional health checks can be added here
        echo "‚úÖ Health checks completed for ${{ inputs.environment }}"

    - name: Run post-setup commands
      if: inputs.post-setup-commands != ''
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Running post-setup commands..."
        ${{ inputs.post-setup-commands }}
        echo "‚úÖ Post-setup commands completed"

    - name: Set end time and calculate duration
      id: setup-result
      if: always()
      shell: bash
      run: |
        end_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "end-time=${end_time}" >> $GITHUB_OUTPUT

        # Calculate duration
        start_timestamp=$(date -d "${{ steps.set-times.outputs.start-time }}" +%s)
        end_timestamp=$(date -d "${end_time}" +%s)
        duration=$((end_timestamp - start_timestamp))

        echo "duration=${duration}" >> $GITHUB_OUTPUT
        echo "kamal-version=${{ inputs.kamal-version }}" >> $GITHUB_OUTPUT

        if [[ "${{ steps.kamal-setup.outputs.setup_status }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

        echo "üïê Kamal v2 setup ended at: ${end_time}"
        echo "‚è±Ô∏è  Total setup duration: ${duration} seconds"

    - name: Cleanup temporary files
      if: always()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üßπ Cleaning up temporary files..."
        
        # Keep .kamal/secrets as it's needed for deployments but ensure proper permissions
        if [[ -f ".kamal/secrets" ]]; then
          chmod 600 .kamal/secrets
        fi
        
        echo "‚úÖ Cleanup completed"

branding:
  icon: 'settings'
  color: 'blue'
