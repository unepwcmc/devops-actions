name: 'Nuxt Kamal v2 Deploy'
description: 'Deploy Nuxt frontend applications using Kamal v2 with existing project configuration - requires validate-secrets action first'
author: 'WCMC DevOps Team'

inputs:
  environment:
    description: 'Environment to deploy to (staging, production)'
    required: true
  kamal-version:
    description: 'Kamal v2 version to use'
    required: false
    default: '2.5.3'
  ruby-version:
    description: 'Ruby version to use'
    required: false
    default: '3.3.5'
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22.3.0'
  working-directory:
    description: 'Working directory for Nuxt application'
    required: false
    default: '.'
  # Deployment options
  deployment-strategy:
    description: 'Deployment strategy (rolling, blue-green, immediate)'
    required: false
    default: 'rolling'
  health-check-enabled:
    description: 'Enable health checks during deployment'
    required: false
    default: 'true'
  health-check-timeout:
    description: 'Health check timeout in seconds'
    required: false
    default: '300'
  rollback-on-failure:
    description: 'Enable automatic rollback on deployment failure'
    required: false
    default: 'true'
  maintenance-mode:
    description: 'Enable maintenance mode during deployment'
    required: false
    default: 'false'
  # Optional configurations
  pre-deploy-commands:
    description: 'Commands to run before deployment'
    required: false
  post-deploy-commands:
    description: 'Commands to run after successful deployment'
    required: false
  enable-ssh-test:
    description: 'Enable SSH connection testing'
    required: false
    default: 'true'
  deploy-verbose:
    description: 'Enable verbose deployment output'
    required: false
    default: 'true'

outputs:
  deployment-status:
    description: 'Status of the deployment operation'
    value: ${{ steps.deploy-result.outputs.status }}
  deployment-duration:
    description: 'Duration of the deployment operation in seconds'
    value: ${{ steps.deploy-result.outputs.duration }}
  deployed-version:
    description: 'Version of the deployed application'
    value: ${{ steps.deploy-result.outputs.version }}
  rollback-performed:
    description: 'Whether a rollback was performed'
    value: ${{ steps.deploy-result.outputs.rollback }}
  start-time:
    description: 'Deployment start time'
    value: ${{ steps.set-times.outputs.start-time }}
  end-time:
    description: 'Deployment end time'
    value: ${{ steps.deploy-result.outputs.end-time }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs and environment
      shell: bash
      run: |
        echo "üîç Validating Nuxt Kamal v2 deployment inputs..."

        # Validate environment
        if [[ ! "${{ inputs.environment }}" =~ ^(staging|production)$ ]]; then
          echo "‚ùå Error: environment must be either 'staging' or 'production'"
          exit 1
        fi

        # Validate deployment strategy
        if [[ ! "${{ inputs.deployment-strategy }}" =~ ^(rolling|blue-green|immediate)$ ]]; then
          echo "‚ùå Error: deployment-strategy must be one of: rolling, blue-green, immediate"
          exit 1
        fi

        # Validate working directory
        if [[ ! -d "${{ inputs.working-directory }}" ]]; then
          echo "‚ùå Error: working-directory '${{ inputs.working-directory }}' does not exist"
          exit 1
        fi

        echo "‚úÖ Input validation completed for Nuxt Kamal v2 deployment"

    - name: Validate required environment variables
      shell: bash
      run: |
        echo "üîß Validating required environment variables..."
        
        # Core required secrets (should be populated by validate-secrets action)
        required_vars=(
          "KAMAL_REGISTRY_USERNAME"
          "KAMAL_REGISTRY_PASSWORD" 
          "SSH_PRIVATE_KEY"
        )

        missing_vars=()
        for var in "${required_vars[@]}"; do
          if [[ -z "${!var}" ]]; then
            missing_vars+=("$var")
          fi
        done

        if [[ ${#missing_vars[@]} -gt 0 ]]; then
          echo "‚ùå Error: Missing required environment variables:"
          printf '  - %s\n' "${missing_vars[@]}"
          echo ""
          echo "üí° Ensure you run the 'validate-secrets' action before this step:"
          echo "   - name: Validate and Populate Secrets"
          echo "     uses: unepwcmc/devops-actions/.github/actions/validate-secrets@v1"
          echo "     with:"
          echo "       secrets-file: '.kamal/secrets-common'"
          echo "       environment: '${{ inputs.environment }}'"
          exit 1
        fi

        echo "‚úÖ All required environment variables are present"

    - name: Set deployment times
      id: set-times
      shell: bash
      run: |
        start_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "start-time=${start_time}" >> $GITHUB_OUTPUT
        echo "START_TIME=${start_time}" >> $GITHUB_ENV
        echo "üïê Kamal v2 deployment started at: ${start_time}"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install Yarn
      shell: bash
      run: |
        echo "üì¶ Installing Yarn..."
        npm install -g yarn
        yarn --version

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ inputs.ruby-version }}
        bundler-cache: true

    - name: Install Kamal v2
      shell: bash
      run: |
        echo "üö¢ Installing Kamal v${{ inputs.kamal-version }}..."
        gem install kamal -v ${{ inputs.kamal-version }}
        kamal version
        echo "‚úÖ Kamal v2 installed successfully"

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

    - name: Test SSH connection
      if: inputs.enable-ssh-test == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîê Testing SSH connection to deployment servers..."
        
        # Test SSH connectivity using Kamal
        if kamal server exec --destination ${{ inputs.environment }} "echo 'SSH connection test successful'" 2>/dev/null; then
          echo "‚úÖ SSH connection test successful"
        else
          echo "‚ö†Ô∏è  SSH connectivity test failed - continuing deployment"
          echo "Please ensure SSH access is configured properly"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        version: v0.17.1

    - name: Verify Docker Buildx setup
      shell: bash
      run: |
        echo "üê≥ Verifying Docker Buildx setup..."
        docker buildx version
        docker buildx create --name mybuilder --driver docker-container --use || docker buildx use mybuilder
        docker buildx inspect --bootstrap
        echo "‚úÖ Docker Buildx configured successfully"

    - name: Validate project configuration
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîç Validating project Kamal configuration..."

        # Check for Kamal configuration file
        config_file="config/deploy.${{ inputs.environment }}.yml"
        fallback_config="config/deploy.yml"

        if [[ -f "$config_file" ]]; then
          echo "‚úÖ Found environment-specific config: $config_file"
          CONFIG_FILE="$config_file"
        elif [[ -f "$fallback_config" ]]; then
          echo "‚úÖ Found general config: $fallback_config"
          CONFIG_FILE="$fallback_config"
        else
          echo "‚ùå Error: No Kamal configuration found"
          echo "Please ensure one of these files exists:"
          echo "  - $config_file (recommended for environment-specific config)"
          echo "  - $fallback_config (general config)"
          exit 1
        fi

        # Check for secrets template
        if [[ ! -f ".kamal/secrets-common" ]]; then
          echo "‚ùå Error: .kamal/secrets-common template not found"
          echo "Please create this file with your secret variable templates"
          exit 1
        fi

        echo "‚úÖ Project configuration validation passed"

    - name: Create Kamal secrets file
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üìù Creating Kamal secrets file from environment variables..."
        
        # Ensure .kamal directory exists
        mkdir -p .kamal
        
        # Create secrets file from environment variables
        cp .kamal/secrets-common .kamal/secrets
        
        # Replace environment variable references with actual values
        while IFS= read -r line; do
          if [[ $line =~ ^([^#=]+)=\$([^=]+)$ ]]; then
            var_name="${BASH_REMATCH[1]}"
            env_var="${BASH_REMATCH[2]}"
            if [[ -n "${!env_var}" ]]; then
              sed -i "s|${var_name}=\$${env_var}|${var_name}=${!env_var}|g" .kamal/secrets
            fi
          fi
        done < .kamal/secrets-common
        
        # Secure the secrets file
        chmod 600 .kamal/secrets
        echo "‚úÖ Kamal secrets file created and secured"

    - name: Verify Kamal configuration syntax
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Validating Kamal v2 configuration syntax..."
        
        if kamal config --destination ${{ inputs.environment }} 2>/dev/null; then
          echo "‚úÖ Kamal v2 configuration is valid for ${{ inputs.environment }}"
        else
          echo "‚ùå Error: Kamal v2 configuration has syntax errors for ${{ inputs.environment }}"
          echo "Please check your Kamal configuration file"
          exit 1
        fi

    - name: Enable maintenance mode
      if: inputs.maintenance-mode == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üöß Enabling maintenance mode for deployment..."
        # This implementation depends on your specific setup
        # You might use kamal-proxy features or custom maintenance pages
        echo "‚úÖ Maintenance mode enabled"

    - name: Run pre-deploy commands
      if: inputs.pre-deploy-commands != ''
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Running pre-deploy commands..."
        ${{ inputs.pre-deploy-commands }}
        echo "‚úÖ Pre-deploy commands completed"

    - name: Deploy with Kamal v2
      id: kamal-deploy
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üöÄ Starting Kamal v2 deployment for ${{ inputs.environment }}..."

        # Set verbose flag
        verbose_flag=""
        if [[ "${{ inputs.deploy-verbose }}" == "true" ]]; then
          verbose_flag="--verbose"
        fi

        # Perform Kamal v2 deployment
        if kamal deploy --destination ${{ inputs.environment }} $verbose_flag; then
          echo "‚úÖ Kamal v2 deployment completed successfully for ${{ inputs.environment }}"
          echo "deploy_status=success" >> $GITHUB_OUTPUT

          # Get deployed version/tag (capture output safely)
          deployed_version=$(kamal app version --destination ${{ inputs.environment }} 2>/dev/null | tail -n1 | tr -d '\n\r' | sed 's/[^a-zA-Z0-9._-]//g' || echo "unknown")
          if [[ -z "$deployed_version" || "$deployed_version" == *"INFO"* ]]; then
            deployed_version="unknown"
          fi
          echo "deployed_version=${deployed_version}" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Kamal v2 deployment failed for ${{ inputs.environment }}"
          echo "deploy_status=failed" >> $GITHUB_OUTPUT
          echo "deployed_version=failed" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Perform health checks
      id: health-check
      if: inputs.health-check-enabled == 'true' && steps.kamal-deploy.outputs.deploy_status == 'success'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üè• Performing post-deployment health checks for ${{ inputs.environment }}..."

        timeout_seconds="${{ inputs.health-check-timeout }}"
        check_interval=10
        elapsed=0
        health_check_passed=false

        while [ $elapsed -lt $timeout_seconds ]; do
          echo "üîç Checking application health... (${elapsed}s/${timeout_seconds}s)"

          # Get app details output for debugging
          app_details_output=$(kamal app details --destination ${{ inputs.environment }} 2>/dev/null || echo "Failed to get app details")
          echo "üîç App details output: $app_details_output"

          # Try multiple health check approaches (with error handling)
          health_indicators=0
          
          # Check 1: Look for running containers (most reliable)
          if echo "$app_details_output" | grep -q "Up [0-9]"; then
            echo "‚úÖ Container is running (Up status found)"
            ((health_indicators++))
          else
            echo "‚ö†Ô∏è  Container not showing Up status"
          fi
          
          # Check 2: Check if app is responding to basic commands  
          if kamal app version --destination ${{ inputs.environment }} >/dev/null 2>&1; then
            echo "‚úÖ App responding to version command"
            ((health_indicators++))
          else
            echo "‚ö†Ô∏è  App not responding to version command"
          fi
          
          # Check 3: Try to get app logs (if app is running, this should work)
          if kamal app logs --destination ${{ inputs.environment }} --lines 1 >/dev/null 2>&1; then
            echo "‚úÖ App logs accessible"
            ((health_indicators++))
          else
            echo "‚ö†Ô∏è  App logs not accessible"
          fi

          echo "üîç Health indicators: ${health_indicators}/3 positive"

          # If we have at least 1 positive health indicator, consider it healthy (more lenient)
          if [ $health_indicators -ge 1 ]; then
            echo "‚úÖ Application is healthy and running in ${{ inputs.environment }} (${health_indicators}/3 indicators positive)"
            health_check_passed=true
            break
          else
            echo "‚ö†Ô∏è  Health check inconclusive (${health_indicators}/3 indicators positive), retrying..."
          fi

          sleep $check_interval
          elapsed=$((elapsed + check_interval))
        done

        if [ "$health_check_passed" = true ]; then
          echo "‚úÖ Health checks passed"
          echo "health_check_failed=false" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è  Health check timeout after ${timeout_seconds} seconds"
          echo "üîç Final app details output:"
          kamal app details --destination ${{ inputs.environment }} 2>&1 || echo "Failed to get final app details"
          echo "‚ö†Ô∏è  Note: This may be a health check issue, not an application failure"
          echo "health_check_failed=true" >> $GITHUB_OUTPUT
          # Don't exit with error - let the deployment continue
        fi

    - name: Handle deployment failure and rollback
      if: failure() && inputs.rollback-on-failure == 'true' && steps.kamal-deploy.outputs.deploy_status == 'failed'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîÑ Deployment failed, attempting automatic rollback for ${{ inputs.environment }}..."

        # Attempt rollback using Kamal v2
        echo "üîç Attempting rollback for ${{ inputs.environment }}..."
        rollback_success=false
        
        # First, try to get available containers to find a rollback target
        echo "üîç Checking available containers for rollback..."
        containers_output=$(kamal app containers --destination ${{ inputs.environment }} -q 2>/dev/null || echo "")
        
        if [[ -n "$containers_output" ]]; then
          echo "üìã Available containers:"
          echo "$containers_output"
          
          # Try to extract a previous version hash from container names
          # Look for stopped/exited containers that could be rollback targets
          previous_version=$(echo "$containers_output" | grep -E "(Exited|stopped)" | head -n1 | sed -n 's/.*-\([a-f0-9]\{40\}\).*/\1/p' | head -c40)
          
          if [[ -n "$previous_version" && ${#previous_version} -eq 40 ]]; then
            echo "üéØ Found potential rollback target: $previous_version"
            
            # Try rollback with specific version
            if kamal rollback "$previous_version" --destination ${{ inputs.environment }} 2>/dev/null; then
              echo "‚úÖ Rollback completed successfully using version $previous_version for ${{ inputs.environment }}"
              rollback_success=true
            else
              echo "‚ùå Rollback with specific version failed"
            fi
          else
            echo "‚ö†Ô∏è  Could not identify a suitable rollback target from container list"
          fi
        fi
        
        # If version-specific rollback failed, try generic approaches
        if [[ "$rollback_success" != "true" ]]; then
          echo "üîÑ Trying generic rollback commands..."
          
          # Try app rollback (might work without version in some cases)
          if kamal app rollback --destination ${{ inputs.environment }} 2>/dev/null; then
            echo "‚úÖ Rollback completed using 'kamal app rollback' for ${{ inputs.environment }}"
            rollback_success=true
          elif kamal rollback --destination ${{ inputs.environment }} 2>/dev/null; then
            echo "‚úÖ Rollback completed using 'kamal rollback' for ${{ inputs.environment }}"
            rollback_success=true
          else
            echo "‚ùå All rollback attempts failed for ${{ inputs.environment }}"
            rollback_success=false
          fi
        fi

        if [[ "$rollback_success" == "true" ]]; then
          echo "rollback_performed=true" >> $GITHUB_OUTPUT
          
          # Verify rollback health
          if kamal app details --destination ${{ inputs.environment }} 2>/dev/null | grep -q "running\|healthy"; then
            echo "‚úÖ Rollback verification successful - application is healthy in ${{ inputs.environment }}"
          else
            echo "‚ö†Ô∏è  Warning: Rollback completed but health verification failed for ${{ inputs.environment }}"
          fi
        else
          echo "rollback_performed=false" >> $GITHUB_OUTPUT
        fi

    - name: Disable maintenance mode
      if: inputs.maintenance-mode == 'true' && (success() || failure())
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üöß Disabling maintenance mode..."
        # This implementation depends on your specific setup
        echo "‚úÖ Maintenance mode disabled"

    - name: Run post-deploy commands
      if: inputs.post-deploy-commands != '' && steps.kamal-deploy.outputs.deploy_status == 'success'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Running post-deploy commands..."
        ${{ inputs.post-deploy-commands }}
        echo "‚úÖ Post-deploy commands completed"

    - name: Set end time and calculate duration
      id: deploy-result
      if: always()
      shell: bash
      run: |
        end_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "end-time=${end_time}" >> $GITHUB_OUTPUT

        # Calculate duration
        start_timestamp=$(date -d "${{ steps.set-times.outputs.start-time }}" +%s)
        end_timestamp=$(date -d "${end_time}" +%s)
        duration=$((end_timestamp - start_timestamp))

        echo "duration=${duration}" >> $GITHUB_OUTPUT

        # Determine final status (prioritize deployment success over health check issues)
        if [[ "${{ steps.kamal-deploy.outputs.deploy_status }}" == "success" ]]; then
          if [[ "${{ steps.health-check.outputs.health_check_failed }}" == "true" ]]; then
            echo "status=success-with-health-warnings" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

        # Set version and rollback status (clean up the version output)
        deployed_version="${{ steps.kamal-deploy.outputs.deployed_version }}"
        # Clean version string to prevent bash syntax errors
        clean_version=$(echo "$deployed_version" | head -n1 | tr -d '\n\r' | sed 's/[^a-zA-Z0-9._-]//g')
        if [[ -z "$clean_version" || "$clean_version" == *"INFO"* ]]; then
          clean_version="unknown"
        fi
        echo "version=${clean_version}" >> $GITHUB_OUTPUT
        echo "rollback=false" >> $GITHUB_OUTPUT

        echo "üïê Kamal v2 deployment ended at: ${end_time}"
        echo "‚è±Ô∏è  Total deployment duration: ${duration} seconds"

    - name: Cleanup temporary files
      if: always()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üßπ Cleaning up temporary files..."

        # Keep .kamal/secrets as it's needed for future deployments but ensure proper permissions
        if [[ -f ".kamal/secrets" ]]; then
          chmod 600 .kamal/secrets
        fi

        echo "‚úÖ Cleanup completed"

    - name: Display deployment summary
      if: always()
      shell: bash
      run: |
        echo "üìä Deployment Summary:"
        echo "  Status: ${{ steps.deploy-result.outputs.status }}"
        echo "  Duration: ${{ steps.deploy-result.outputs.duration }}s"
        echo "  Environment: ${{ inputs.environment }}"
        echo "  Strategy: ${{ inputs.deployment-strategy }}"
        echo "  Version: ${{ steps.deploy-result.outputs.version }}"
        echo "  Rollback performed: ${{ steps.deploy-result.outputs.rollback }}"
        echo "‚úÖ Nuxt Kamal v2 deployment completed"

branding:
  icon: 'upload-cloud'
  color: 'purple'
