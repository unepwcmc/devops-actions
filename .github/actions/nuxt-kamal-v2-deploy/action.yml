name: 'Nuxt Kamal v2 Deploy'
description: 'Deploy Nuxt frontend applications using Kamal v2 with comprehensive configuration, health checks, and rollback capabilities'
author: 'WCMC DevOps Team'

inputs:
  environment:
    description: 'Environment to deploy to (staging, production)'
    required: true
  kamal-version:
    description: 'Kamal v2 version to use'
    required: false
    default: '2.5.3'
  ruby-version:
    description: 'Ruby version to use'
    required: false
    default: '3.3.5'
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22.3.0'
  working-directory:
    description: 'Working directory for Nuxt application'
    required: false
    default: '.'
  # Deployment options
  deployment-strategy:
    description: 'Deployment strategy (rolling, blue-green, immediate)'
    required: false
    default: 'rolling'
  health-check-enabled:
    description: 'Enable health checks during deployment'
    required: false
    default: 'true'
  health-check-timeout:
    description: 'Health check timeout in seconds'
    required: false
    default: '300'
  rollback-on-failure:
    description: 'Enable automatic rollback on deployment failure'
    required: false
    default: 'true'
  maintenance-mode:
    description: 'Enable maintenance mode during deployment'
    required: false
    default: 'false'
  # Optional configurations
  additional-env-vars:
    description: 'Additional environment variables in KEY=VALUE format, one per line'
    required: false
  pre-deploy-commands:
    description: 'Commands to run before deployment'
    required: false
  post-deploy-commands:
    description: 'Commands to run after successful deployment'
    required: false
  enable-ssh-test:
    description: 'Enable SSH connection testing'
    required: false
    default: 'true'
  skip-env-push:
    description: 'Skip the kamal env push step'
    required: false
    default: 'false'
  deploy-verbose:
    description: 'Enable verbose output for deployment'
    required: false
    default: 'true'

outputs:
  deployment-status:
    description: 'Status of the deployment operation'
    value: ${{ steps.deploy-result.outputs.status }}
  deployment-duration:
    description: 'Duration of the deployment operation in seconds'
    value: ${{ steps.deploy-result.outputs.duration }}
  start-time:
    description: 'Deployment start time'
    value: ${{ steps.set-times.outputs.start-time }}
  end-time:
    description: 'Deployment end time'
    value: ${{ steps.deploy-result.outputs.end-time }}
  deployed-version:
    description: 'Version/tag of the deployed application'
    value: ${{ steps.deploy-result.outputs.version }}
  rollback-performed:
    description: 'Whether a rollback was performed'
    value: ${{ steps.deploy-result.outputs.rollback-performed }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "üîç Validating Nuxt Kamal v2 deployment inputs..."

        # Validate environment
        if [[ ! "${{ inputs.environment }}" =~ ^(staging|production)$ ]]; then
          echo "‚ùå Error: environment must be either 'staging' or 'production'"
          exit 1
        fi

        # Validate deployment strategy
        if [[ ! "${{ inputs.deployment-strategy }}" =~ ^(rolling|blue-green|immediate)$ ]]; then
          echo "‚ùå Error: deployment-strategy must be one of: rolling, blue-green, immediate"
          exit 1
        fi

        # Validate working directory
        if [[ ! -d "${{ inputs.working-directory }}" ]]; then
          echo "‚ùå Error: working-directory '${{ inputs.working-directory }}' does not exist"
          exit 1
        fi

        echo "‚úÖ Input validation completed for Nuxt Kamal v2 deployment"

    - name: Set deployment times
      id: set-times
      shell: bash
      run: |
        start_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "start-time=${start_time}" >> $GITHUB_OUTPUT
        echo "START_TIME=${start_time}" >> $GITHUB_ENV
        echo "üïê Kamal v2 deployment started at: ${start_time}"

    - name: Validate required environment variables
      shell: bash
      run: |
        echo "üîß Validating required environment variables for Kamal v2 deployment..."
        
        # Core required variables for any Nuxt Kamal deployment
        required_vars=(
          "GH_TOKEN"
          "KAMAL_REGISTRY_PASSWORD"
          "KAMAL_REGISTRY_USERNAME"
          "SSH_PRIVATE_KEY"
          "WEB_SERVER_DNS_NAME"
          "FRONTEND_APP_NAME"
        )

        # Optional variables that enhance functionality but aren't strictly required
        optional_vars=(
          "AUTH_ORIGIN"
          "NUXT_PUBLIC_RAILS_API_SERVER"
          "RAILS_MASTER_KEY"
          "RAILS_DEFAULT_PUBLIC_APP_HOST"
          "RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL"
          "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID"
          "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET"
          "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID"
          "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET"
          "NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER"
        )

        # Validate required variables
        echo "Checking core required variables..."
        for var_name in "${required_vars[@]}"; do
          if [[ -z "${!var_name}" ]]; then
            echo "‚ùå Error: ${var_name} is not set or empty"
            echo "Please add this secret to your GitHub environment (${{ inputs.environment }})"
            exit 1
          else
            echo "‚úÖ ${var_name} is set"
          fi
        done

        # Check optional variables (warn but don't fail)
        echo "Checking optional variables..."
        for var_name in "${optional_vars[@]}"; do
          if [[ -z "${!var_name}" ]]; then
            echo "‚ö†Ô∏è  ${var_name} is not set (optional - continuing without it)"
          else
            echo "‚úÖ ${var_name} is set"
          fi
        done

        echo "‚úÖ Environment variable validation completed"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install Yarn
      shell: bash
      run: |
        echo "üì¶ Installing Yarn..."
        npm install -g yarn
        yarn --version

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ inputs.ruby-version }}
        bundler-cache: true

    - name: Install Kamal v2
      shell: bash
      run: |
        echo "üö¢ Installing Kamal v${{ inputs.kamal-version }}..."
        gem install kamal -v ${{ inputs.kamal-version }}
        kamal version
        echo "‚úÖ Kamal v2 installed successfully"

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

    - name: Test SSH connection
      if: inputs.enable-ssh-test == 'true'
      shell: bash
      run: |
        echo "üîê Testing SSH connection to deployment server..."
        if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -T wcmc@${{ env.WEB_SERVER_DNS_NAME }} echo "SSH connection successful"; then
          echo "‚úÖ SSH connection successful"
        else
          echo "‚ùå SSH connection failed"
          exit 1
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        version: v0.17.1

    - name: Verify Docker Buildx setup
      shell: bash
      run: |
        echo "üê≥ Verifying Docker Buildx setup..."
        if ! docker buildx version; then
          echo "‚ùå Error: Buildx not installed correctly"
          exit 1
        fi
        docker buildx create --name mybuilder --driver docker-container --use || docker buildx use mybuilder
        docker buildx inspect --bootstrap
        echo "‚úÖ Docker Buildx configured successfully"

    - name: Update Kamal v2 secrets file
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîê Updating Kamal v2 secrets file for deployment..."

        # Create .kamal directory if it doesn't exist
        mkdir -p .kamal

        secrets_file=".kamal/secrets"

        # Create secrets file with safe handling of optional variables
        {
          echo "# Generated by Nuxt Kamal v2 Deploy Action at $(date -u)"
          echo ""
          echo "# Registry Configuration"
          echo "KAMAL_REGISTRY_USERNAME=${KAMAL_REGISTRY_USERNAME}"
          echo "KAMAL_REGISTRY_PASSWORD=${KAMAL_REGISTRY_PASSWORD}"
          
          echo ""
          echo "# Frontend Application Configuration"
          echo "FRONTEND_APP_NAME=${FRONTEND_APP_NAME}"
          
          # Optional variables - only add if they exist
          [[ -n "${AUTH_ORIGIN:-}" ]] && echo "AUTH_ORIGIN=${AUTH_ORIGIN}"
          [[ -n "${NUXT_PUBLIC_RAILS_API_SERVER:-}" ]] && echo "NUXT_PUBLIC_RAILS_API_SERVER=${NUXT_PUBLIC_RAILS_API_SERVER}"
          
          echo ""
          echo "# Rails API Integration (optional)"
          [[ -n "${RAILS_MASTER_KEY:-}" ]] && echo "RAILS_MASTER_KEY=${RAILS_MASTER_KEY}"
          [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST:-}" ]] && echo "RAILS_DEFAULT_PUBLIC_APP_HOST=${RAILS_DEFAULT_PUBLIC_APP_HOST}"
          [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL:-}" ]] && echo "RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL=${RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL}"
          
          echo ""
          echo "# Azure AD Configuration (optional)"
          [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID:-}" ]] && echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_ID}"
          [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET:-}" ]] && echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_CLIENT_SECRET}"
          [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID:-}" ]] && echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_AZURE_AD_TENANT_ID}"
          
          echo ""
          echo "# WCMC User Management Module (optional)"
          [[ -n "${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET:-}" ]] && echo "NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET=${NUXT_WCMC_MODULES_WCMC_USER_MANAGEMENT_SECRET}"
          [[ -n "${NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER:-}" ]] && echo "NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER=${NUXT_PUBLIC_WCMC_MODULES_WCMC_USER_MANAGEMENT_RAILS_API_SERVER}"
          
          echo ""
          echo "# Environment Configuration"
          echo "NODE_ENV=${{ inputs.environment }}"
          echo "ENVIRONMENT=${{ inputs.environment }}"
        } > "$secrets_file"

        # Add additional environment variables if provided
        if [[ -n "${{ inputs.additional-env-vars }}" ]]; then
          echo "" >> "$secrets_file"
          echo "# Additional Environment Variables" >> "$secrets_file"
          echo "${{ inputs.additional-env-vars }}" >> "$secrets_file"
        fi

        # Secure the secrets file
        chmod 600 "$secrets_file"
        echo "‚úÖ Kamal v2 secrets file updated with proper permissions"

    - name: Verify Kamal v2 configuration
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîç Verifying Kamal v2 configuration before deployment..."

        # Check for required Kamal v2 configuration files
        config_file="config/deploy.${{ inputs.environment }}.yml"
        if [[ ! -f "$config_file" ]]; then
          echo "‚ùå Error: $config_file not found - required for Kamal v2 deployment"
          exit 1
        else
          echo "‚úÖ Kamal v2 configuration file found: $config_file"
        fi

        # Verify secrets file
        if [[ ! -f ".kamal/secrets" ]]; then
          echo "‚ùå Error: Kamal v2 secrets file not found"
          exit 1
        fi

        # Test Kamal v2 configuration syntax
        echo "üîß Testing Kamal v2 configuration syntax..."
        if kamal config --destination ${{ inputs.environment }} 2>/dev/null; then
          echo "‚úÖ Kamal v2 configuration is valid for ${{ inputs.environment }}"
        else
          echo "‚ùå Error: Kamal v2 configuration has syntax errors for ${{ inputs.environment }}"
          exit 1
        fi

    - name: Run pre-deploy commands
      if: inputs.pre-deploy-commands != ''
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Running pre-deploy commands..."
        ${{ inputs.pre-deploy-commands }}
        echo "‚úÖ Pre-deploy commands completed"

    - name: Deploy with Kamal v2
      id: kamal-deploy
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üöÄ Starting Kamal v2 deployment..."

        # Set verbose flag
        verbose_flag=""
        if [[ "${{ inputs.deploy-verbose }}" == "true" ]]; then
          verbose_flag="--verbose"
        fi

        # Perform Kamal v2 deployment
        if kamal deploy --destination ${{ inputs.environment }} $verbose_flag; then
          echo "‚úÖ Kamal v2 deployment completed successfully for ${{ inputs.environment }}"
          echo "deploy_status=success" >> $GITHUB_OUTPUT

          # Get deployed version/tag
          deployed_version=$(kamal app version --destination ${{ inputs.environment }} 2>/dev/null || echo "unknown")
          echo "deployed_version=${deployed_version}" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Kamal v2 deployment failed for ${{ inputs.environment }}"
          echo "deploy_status=failed" >> $GITHUB_OUTPUT
          echo "deployed_version=failed" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Perform health checks
      if: inputs.health-check-enabled == 'true' && steps.kamal-deploy.outputs.deploy_status == 'success'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üè• Performing post-deployment health checks..."

        timeout_seconds="${{ inputs.health-check-timeout }}"
        check_interval=10
        elapsed=0

        while [ $elapsed -lt $timeout_seconds ]; do
          echo "üîç Checking application health... (${elapsed}s/${timeout_seconds}s)"

          # Check if services are running (Kamal v2 syntax)
          if kamal app details --destination ${{ inputs.environment }} 2>/dev/null | grep -q "running\|healthy"; then
            echo "‚úÖ Application is healthy and running in ${{ inputs.environment }}"
            break
          fi

          sleep $check_interval
          elapsed=$((elapsed + check_interval))
        done

        if [ $elapsed -ge $timeout_seconds ]; then
          echo "‚ùå Health check timeout after ${timeout_seconds} seconds"
          echo "health_check_failed=true" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "‚úÖ Health checks passed"
          echo "health_check_failed=false" >> $GITHUB_OUTPUT
        fi

    - name: Handle deployment failure and rollback
      if: failure() && inputs.rollback-on-failure == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîÑ Deployment failed, attempting automatic rollback..."

        # Attempt rollback using Kamal v2
        if kamal app rollback --destination ${{ inputs.environment }}; then
          echo "‚úÖ Rollback completed successfully for ${{ inputs.environment }}"
          echo "rollback_performed=true" >> $GITHUB_OUTPUT

          # Verify rollback health
          if kamal app details --destination ${{ inputs.environment }} 2>/dev/null | grep -q "running\|healthy"; then
            echo "‚úÖ Rollback verification successful - application is healthy in ${{ inputs.environment }}"
          else
            echo "‚ö†Ô∏è  Warning: Rollback completed but health verification failed for ${{ inputs.environment }}"
          fi
        else
          echo "‚ùå Rollback failed for ${{ inputs.environment }}"
          echo "rollback_performed=false" >> $GITHUB_OUTPUT
        fi

    - name: Run post-deploy commands
      if: inputs.post-deploy-commands != '' && steps.kamal-deploy.outputs.deploy_status == 'success'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üîß Running post-deploy commands..."
        ${{ inputs.post-deploy-commands }}
        echo "‚úÖ Post-deploy commands completed"

    - name: Set end time and calculate duration
      id: deploy-result
      if: always()
      shell: bash
      run: |
        end_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        echo "end-time=${end_time}" >> $GITHUB_OUTPUT

        # Calculate duration
        start_timestamp=$(date -d "${{ steps.set-times.outputs.start-time }}" +%s)
        end_timestamp=$(date -d "${end_time}" +%s)
        duration=$((end_timestamp - start_timestamp))

        echo "duration=${duration}" >> $GITHUB_OUTPUT

        # Determine final status
        if [[ "${{ steps.kamal-deploy.outputs.deploy_status }}" == "success" ]] && [[ "${{ steps.kamal-deploy.outputs.health_check_failed }}" != "true" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

        # Set version and rollback status
        echo "version=${{ steps.kamal-deploy.outputs.deployed_version }}" >> $GITHUB_OUTPUT
        echo "rollback-performed=${{ steps.kamal-deploy.outputs.rollback_performed || 'false' }}" >> $GITHUB_OUTPUT

        echo "üïê Kamal v2 deployment ended at: ${end_time}"
        echo "‚è±Ô∏è  Total deployment duration: ${duration} seconds"

    - name: Cleanup sensitive files
      if: always()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üßπ Cleaning up temporary files..."

        # Note: We keep .kamal/secrets as it's needed for future deployments
        # but ensure it has proper permissions
        if [[ -f ".kamal/secrets" ]]; then
          chmod 600 .kamal/secrets
        fi

        echo "‚úÖ Cleanup completed"

    - name: Display deployment summary
      if: always()
      shell: bash
      run: |
        echo "üìä Deployment Summary:"
        echo "  Status: ${{ steps.deploy-result.outputs.status }}"
        echo "  Duration: ${{ steps.deploy-result.outputs.duration }}s"
        echo "  Environment: ${{ inputs.environment }}"
        echo "  Strategy: ${{ inputs.deployment-strategy }}"
        echo "  Version: ${{ steps.deploy-result.outputs.version }}"
        echo "  Rollback performed: ${{ steps.deploy-result.outputs.rollback-performed }}"
        echo "‚úÖ Nuxt Kamal v2 deployment completed"
