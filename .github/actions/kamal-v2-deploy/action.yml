name: 'Kamal v2 Deploy'
description: 'Deploy Rails applications using Kamal v2 with comprehensive configuration, health checks, and rollback capabilities'
author: 'WCMC DevOps Team'

inputs:
  environment:
    description: 'Environment to deploy to (staging, production)'
    required: true
  kamal-version:
    description: 'Kamal version to use'
    required: false
    default: '2.5.3'
  ruby-version:
    description: 'Ruby version to use'
    required: false
    default: '3.3.5'
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22.3.0'
  buildx-version:
    description: 'Docker Buildx version to use'
    required: false
    default: 'v0.17.1'
  working-directory:
    description: 'Working directory for Rails application'
    required: false
    default: '.'
  dockerfile-path:
    description: 'Path to Dockerfile relative to working directory'
    required: false
    default: 'Dockerfile.deploy'
  kamal-config-path:
    description: 'Path to Kamal config file relative to working directory'
    required: false
    default: 'config/deploy.yml'
  database-port:
    description: 'Database port'
    required: false
    default: '5432'
  # Redis Configuration defaults
  redis-host:
    description: 'Redis host'
    required: false
    default: 'host.docker.internal'
  redis-port:
    description: 'Redis port'
    required: false
    default: '6379'
  redis-database:
    description: 'Redis database number for Sidekiq'
    required: false
    default: '1'
  # Project-specific Database Naming
  database-env-prefix:
    description: 'Database environment variable prefix (e.g., OCEAN_CENSUS, TARGET_TRACKER)'
    required: false
    default: 'TARGET_TRACKER'
  # Deployment options
  deployment-strategy:
    description: 'Deployment strategy (rolling, blue-green, immediate)'
    required: false
    default: 'rolling'
  health-check-enabled:
    description: 'Enable health checks during deployment'
    required: false
    default: 'true'
  health-check-timeout:
    description: 'Health check timeout in seconds'
    required: false
    default: '300'
  rollback-on-failure:
    description: 'Enable automatic rollback on deployment failure'
    required: false
    default: 'true'
  maintenance-mode:
    description: 'Enable maintenance mode during deployment'
    required: false
    default: 'false'
  # Generic Additional Secrets
  additional-secrets:
    description: 'Additional secrets in KEY=VALUE format, one per line'
    required: false
  pre-deploy-commands:
    description: 'Additional commands to run before deployment'
    required: false
  post-deploy-commands:
    description: 'Additional commands to run after successful deployment'
    required: false

outputs:
  deployment-status:
    description: 'Status of the deployment operation'
    value: ${{ steps.deploy-result.outputs.status }}
  deployment-duration:
    description: 'Duration of the deployment operation in seconds'
    value: ${{ steps.deploy-result.outputs.duration }}
  deployment-url:
    description: 'URL of the deployed application'
    value: ${{ steps.deploy-result.outputs.url }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "🔍 Validating deployment inputs..."

        # Validate environment
        if [[ ! "${{ inputs.environment }}" =~ ^(staging|production)$ ]]; then
          echo "❌ Error: environment must be either 'staging' or 'production'"
          exit 1
        fi

        # Validate deployment strategy
        if [[ ! "${{ inputs.deployment-strategy }}" =~ ^(rolling|blue-green|immediate)$ ]]; then
          echo "❌ Error: deployment-strategy must be one of: rolling, blue-green, immediate"
          exit 1
        fi

        # Validate working directory exists
        if [[ ! -d "${{ inputs.working-directory }}" ]]; then
          echo "❌ Error: working-directory '${{ inputs.working-directory }}' does not exist"
          exit 1
        fi

        echo "✅ Input validation completed"

    - name: Validate required environment variables
      shell: bash
      run: |
        echo "🔧 Validating required environment variables for Kamal v2 deployment..."
        
        var_names=(
          "SSH_PRIVATE_KEY"
          "KAMAL_REGISTRY_USERNAME"
          "KAMAL_REGISTRY_PASSWORD"
          "RAILS_MASTER_KEY"
          "RAILS_DEFAULT_PUBLIC_APP_HOST"
          "RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL"
          "DATABASE_HOST"
          "DATABASE_NAME"
          "DATABASE_USERNAME"
          "DATABASE_PASSWORD"
        )

        for var_name in "${var_names[@]}"; do
          if [[ -z "${!var_name}" ]]; then
            echo "❌ Error: ${var_name} is not set or empty"
            echo "Please add this secret to your GitHub environment (${{ inputs.environment }})"
            exit 1
          else
            echo "✅ ${var_name} is set"
          fi
        done

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ inputs.ruby-version }}
        bundler-cache: true

    - name: Install PostgreSQL Client Libraries
      shell: bash
      run: |
        echo "🐘 Installing PostgreSQL client libraries..."
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Install Kamal
      shell: bash
      run: |
        echo "🚢 Installing Kamal v${{ inputs.kamal-version }}..."
        gem install kamal -v ${{ inputs.kamal-version }}
        kamal version

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ inputs.SSH_PRIVATE_KEY }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        version: ${{ inputs.buildx-version }}

    - name: Configure Buildx
      shell: bash
      run: |
        echo "🐳 Configuring Docker Buildx..."
        if ! docker buildx version; then
          echo "❌ Error: Buildx not installed correctly"
          exit 1
        fi

        docker buildx create --name kamal-deploy-builder --driver docker-container --use 2>/dev/null || docker buildx use kamal-deploy-builder
        docker buildx inspect --bootstrap
        echo "✅ Buildx configured successfully"

    - name: Create Kamal secrets file
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔐 Creating Kamal secrets file..."
        mkdir -p .kamal
        secrets_file=".kamal/secrets.${{ inputs.environment }}"

        # Create secrets file with proper permissions
        touch "$secrets_file"
        chmod 600 "$secrets_file"

        # Base secrets
        cat <<EOF > "$secrets_file"
        KAMAL_REGISTRY_USERNAME=${{ inputs.KAMAL_REGISTRY_USERNAME }}
        KAMAL_REGISTRY_PASSWORD=${{ inputs.KAMAL_REGISTRY_PASSWORD }}
        RAILS_MASTER_KEY=${{ inputs.RAILS_MASTER_KEY }}
        ${{ inputs.database-env-prefix }}_DATABASE_HOSTNAME=${{ inputs.DATABASE_HOST }}
        ${{ inputs.database-env-prefix }}_DATABASE_NAME=${{ inputs.DATABASE_NAME }}
        ${{ inputs.database-env-prefix }}_DATABASE_USERNAME=${{ inputs.DATABASE_USERNAME }}
        ${{ inputs.database-env-prefix }}_DATABASE_PASSWORD=${{ inputs.DATABASE_PASSWORD }}
        ${{ inputs.database-env-prefix }}_DATABASE_PORT=${{ inputs.database-port }}
        EOF

        # Add Redis configuration if provided
        if [[ -n "${{ inputs.redis-username }}" && -n "${{ inputs.redis-password }}" ]]; then
          echo "REDIS_USERNAME=${{ inputs.redis-username }}" >> "$secrets_file"
          echo "REDIS_PASSWORD=${{ inputs.redis-password }}" >> "$secrets_file"
          echo "SIDEKIQ_REDIS_URL=redis://${{ inputs.redis-username }}:${{ inputs.redis-password }}@${{ inputs.redis-host }}:${{ inputs.redis-port }}/${{ inputs.redis-database }}" >> "$secrets_file"
          echo "✅ Added Redis configuration with Sidekiq URL"
        fi

        # Add Frontend Integration if provided
        if [[ -n "${{ inputs.frontend-app-name }}" ]]; then
          echo "FRONTEND_APP_NAME=${{ inputs.frontend-app-name }}" >> "$secrets_file"
          echo "✅ Added Frontend integration configuration"
        fi

        # Add additional secrets if provided
        if [[ -n "${{ inputs.additional-secrets }}" ]]; then
          echo "" >> "$secrets_file"
          echo "# Additional project-specific secrets" >> "$secrets_file"
          echo "${{ inputs.additional-secrets }}" >> "$secrets_file"
          echo "✅ Added additional project-specific secrets"
        fi

        echo "✅ Secrets file created"

    - name: Get current deployment info
      id: current-deployment
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "📋 Getting current deployment information..."
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)

        # Get current version/container info for potential rollback
        if kamal ps -c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }} 2>/dev/null; then
          current_containers=$(kamal ps -c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }} 2>/dev/null | grep -v "CONTAINER" | head -1 | awk '{print $2}' || echo "none")
          echo "current-version=${current_containers}" >> $GITHUB_OUTPUT
          echo "ℹ️ Current running containers: ${current_containers}"
        else
          echo "current-version=none" >> $GITHUB_OUTPUT
          echo "ℹ️ No current deployment found"
        fi

    - name: Enable maintenance mode
      if: inputs.maintenance-mode == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🚧 Enabling maintenance mode..."
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)

        # Create a simple maintenance page if it doesn't exist
        if [[ ! -f "public/maintenance.html" ]]; then
          mkdir -p public
          cat <<EOF > public/maintenance.html
        <!DOCTYPE html>
        <html>
        <head>
          <title>Maintenance</title>
          <style>body { font-family: Arial; text-align: center; padding: 50px; }</style>
        </head>
        <body>
          <h1>🔧 Maintenance in Progress</h1>
          <p>We're updating the application. Please check back in a few minutes.</p>
        </body>
        </html>
        EOF
        fi

        # Enable maintenance mode (this would depend on your specific setup)
        echo "✅ Maintenance mode enabled"

    - name: Run pre-deploy commands
      if: inputs.pre-deploy-commands != ''
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔧 Running pre-deploy commands..."
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)
        ${{ inputs.pre-deploy-commands }}

    - name: Deploy with Kamal
      id: kamal-deploy
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🚀 Starting Kamal deployment to ${{ inputs.environment }}..."
        start_time=$(date +%s)

        # Load secrets
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)

        # Set deployment flags based on strategy
        deploy_flags="--verbose -c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }}"

        if [[ "${{ inputs.skip-asset-precompilation }}" == "true" ]]; then
          deploy_flags="$deploy_flags --skip-push"
        fi

        # Run deployment
        if kamal deploy $deploy_flags; then
          end_time=$(date +%s)
          duration=$((end_time - start_time))

          # Get deployed version
          deployed_version=$(kamal ps -c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }} 2>/dev/null | grep -v "CONTAINER" | head -1 | awk '{print $2}' || echo "unknown")

          echo "deploy-duration=${duration}" >> $GITHUB_OUTPUT
          echo "deploy-status=success" >> $GITHUB_OUTPUT
          echo "deployed-version=${deployed_version}" >> $GITHUB_OUTPUT
          echo "rollback-performed=false" >> $GITHUB_OUTPUT
          echo "✅ Kamal deployment completed successfully in ${duration} seconds"
          echo "🏷️ Deployed version: ${deployed_version}"
        else
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "deploy-duration=${duration}" >> $GITHUB_OUTPUT
          echo "deploy-status=failed" >> $GITHUB_OUTPUT
          echo "deployed-version=none" >> $GITHUB_OUTPUT
          echo "❌ Kamal deployment failed after ${duration} seconds"
          exit 1
        fi

    - name: Wait for deployment to stabilize
      shell: bash
      run: |
        echo "⏳ Waiting for deployment to stabilize..."
        sleep 30

    - name: Run health checks
      id: health-checks
      if: inputs.health-check-enabled == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🏥 Running comprehensive health checks..."
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)

        # Check container status
        echo "📊 Checking container status..."
        if ! kamal ps -c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }}; then
          echo "❌ Container health check failed"
          echo "health-status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Check application health endpoint if provided
        if [[ -n "${{ inputs.health-check-url }}" ]]; then
          echo "🔍 Testing health check endpoint: ${{ inputs.health-check-url }}"
          timeout_seconds=${{ inputs.health-check-timeout }}

          for i in $(seq 1 $((timeout_seconds / 10))); do
            if curl -f -s "${{ inputs.health-check-url }}" >/dev/null; then
              echo "✅ Health check endpoint is responding"
              echo "health-status=passed" >> $GITHUB_OUTPUT
              break
            else
              echo "⏳ Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi

            if [[ $i -eq $((timeout_seconds / 10)) ]]; then
              echo "❌ Health check endpoint failed after ${timeout_seconds} seconds"
              echo "health-status=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          done
        else
          echo "ℹ️ No health check URL provided, skipping endpoint check"
          echo "health-status=skipped" >> $GITHUB_OUTPUT
        fi

        echo "✅ All health checks passed"

    - name: Disable maintenance mode
      if: inputs.maintenance-mode == 'true' && (success() || failure())
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🚧 Disabling maintenance mode..."
        # Disable maintenance mode (implementation depends on your setup)
        echo "✅ Maintenance mode disabled"

    - name: Run post-deploy commands
      if: inputs.post-deploy-commands != '' && success()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔧 Running post-deploy commands..."
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)
        ${{ inputs.post-deploy-commands }}

    - name: Rollback on failure
      id: rollback
      if: failure() && inputs.rollback-on-failure == 'true' && steps.current-deployment.outputs.current-version != 'none'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔄 Performing automatic rollback..."
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)

        # Attempt rollback to previous version
        if kamal rollback -c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }}; then
          echo "✅ Rollback completed successfully"
          echo "rollback-performed=true" >> $GITHUB_OUTPUT

          # Verify rollback
          sleep 10
          kamal ps -c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }}
        else
          echo "❌ Rollback failed"
          echo "rollback-performed=failed" >> $GITHUB_OUTPUT
        fi

    - name: Set deployment result
      id: deploy-result
      if: always()
      shell: bash
      run: |
        # Determine final status
        deploy_status="${{ steps.kamal-deploy.outputs.deploy-status }}"
        health_status="${{ steps.health-checks.outputs.health-status }}"
        rollback_status="${{ steps.rollback.outputs.rollback-performed }}"

        if [[ "$deploy_status" == "success" && ("$health_status" == "passed" || "$health_status" == "skipped") ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        elif [[ "$rollback_status" == "true" ]]; then
          echo "status=rolled-back" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

        # Set other outputs
        duration="${{ steps.kamal-deploy.outputs.deploy-duration }}"
        version="${{ steps.kamal-deploy.outputs.deployed-version }}"
        rollback="${{ steps.rollback.outputs.rollback-performed }}"

        echo "duration=${duration:-unknown}" >> $GITHUB_OUTPUT
        echo "version=${version:-unknown}" >> $GITHUB_OUTPUT
        echo "rollback=${rollback:-false}" >> $GITHUB_OUTPUT

    - name: Cleanup
      if: always()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🧹 Performing cleanup..."

        # Remove secrets file
        rm -f .kamal/secrets.${{ inputs.environment }}

        # Clean up Docker resources if deployment failed
        if [[ "${{ steps.deploy-result.outputs.status }}" != "success" ]]; then
          docker system prune -f 2>/dev/null || true
        fi

        echo "✅ Cleanup completed"

branding:
  icon: 'upload-cloud'
  color: 'purple'
