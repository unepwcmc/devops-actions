name: 'Kamal v2 Deploy'
description: 'Deploy Rails applications using Kamal v2 with comprehensive configuration, health checks, and rollback capabilities'
author: 'WCMC DevOps Team'

inputs:
  environment:
    description: 'Environment to deploy to (staging, production)'
    required: true
  kamal-version:
    description: 'Kamal version to use'
    required: false
    default: '2.5.3'
  ruby-version:
    description: 'Ruby version to use'
    required: false
    default: '3.3.5'
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '22.3.0'
  buildx-version:
    description: 'Docker Buildx version to use'
    required: false
    default: 'v0.17.1'
  working-directory:
    description: 'Working directory for Rails application'
    required: false
    default: '.'
  dockerfile-path:
    description: 'Path to Dockerfile relative to working directory'
    required: false
    default: 'Dockerfile.deploy'
  kamal-config-path:
    description: 'Path to Kamal config file relative to working directory'
    required: false
    default: 'config/deploy.yml'
  database-port:
    description: 'Database port'
    required: false
    default: '5432'
  # Redis Configuration defaults
  redis-host:
    description: 'Redis host'
    required: false
    default: 'host.docker.internal'
  redis-port:
    description: 'Redis port'
    required: false
    default: '6379'
  redis-database:
    description: 'Redis database number for Sidekiq'
    required: false
    default: '1'

  # Deployment options
  deployment-strategy:
    description: 'Deployment strategy (rolling, blue-green, immediate)'
    required: false
    default: 'rolling'
  health-check-enabled:
    description: 'Enable health checks during deployment'
    required: false
    default: 'true'
  health-check-timeout:
    description: 'Health check timeout in seconds'
    required: false
    default: '300'
  rollback-on-failure:
    description: 'Enable automatic rollback on deployment failure'
    required: false
    default: 'false'
  maintenance-mode:
    description: 'Enable maintenance mode during deployment'
    required: false
    default: 'false'
  # Generic Additional Secrets
  additional-secrets:
    description: 'Additional secrets in KEY=VALUE format, one per line'
    required: false
  pre-deploy-commands:
    description: 'Additional commands to run before deployment'
    required: false
  post-deploy-commands:
    description: 'Additional commands to run after successful deployment'
    required: false

outputs:
  deployment-status:
    description: 'Status of the deployment operation'
    value: ${{ steps.deploy-result.outputs.status }}
  deployment-duration:
    description: 'Duration of the deployment operation in seconds'
    value: ${{ steps.deploy-result.outputs.duration }}
  deployment-url:
    description: 'URL of the deployed application'
    value: ${{ steps.deploy-result.outputs.url }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "🔍 Validating deployment inputs..."

        # Validate environment
        if [[ ! "${{ inputs.environment }}" =~ ^(staging|production)$ ]]; then
          echo "❌ Error: environment must be either 'staging' or 'production'"
          exit 1
        fi

        # Validate deployment strategy
        if [[ ! "${{ inputs.deployment-strategy }}" =~ ^(rolling|blue-green|immediate)$ ]]; then
          echo "❌ Error: deployment-strategy must be one of: rolling, blue-green, immediate"
          exit 1
        fi

        # Validate working directory exists
        if [[ ! -d "${{ inputs.working-directory }}" ]]; then
          echo "❌ Error: working-directory '${{ inputs.working-directory }}' does not exist"
          exit 1
        fi

        echo "✅ Input validation completed"

    - name: Validate required environment variables
      shell: bash
      run: |
        echo "🔧 Validating required environment variables for Kamal v2 deployment..."
        
        # Core required secrets
        required_vars=(
          "KAMAL_REGISTRY_USERNAME"
          "KAMAL_REGISTRY_PASSWORD" 
          "SSH_PRIVATE_KEY"
          "RAILS_MASTER_KEY"
          "DATABASE_HOST"
          "DATABASE_NAME"
          "DATABASE_USERNAME"
          "DATABASE_PASSWORD"
        )

        missing_vars=()
        for var in "${required_vars[@]}"; do
          if [[ -z "${!var}" ]]; then
            missing_vars+=("$var")
          fi
        done

        if [[ ${#missing_vars[@]} -gt 0 ]]; then
          echo "❌ Error: Missing required environment variables:"
          printf '  - %s\n' "${missing_vars[@]}"
          echo ""
          echo "Please add these secrets to your GitHub environment (${{ inputs.environment }})"
          exit 1
        fi

        echo "✅ All required environment variables are present"

        # Optional Rails-specific variables (for projects that need them)
        if [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST}" ]]; then
          echo "✅ RAILS_DEFAULT_PUBLIC_APP_HOST is set"
        else
          echo "ℹ️ RAILS_DEFAULT_PUBLIC_APP_HOST not set (optional)"
        fi

        if [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL}" ]]; then
          echo "✅ RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL is set"
        else
          echo "ℹ️ RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL not set (optional)"
        fi

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ inputs.ruby-version }}
        bundler-cache: true

    - name: Install PostgreSQL Client Libraries
      shell: bash
      run: |
        echo "🐘 Installing PostgreSQL client libraries..."
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Install Kamal
      shell: bash
      run: |
        echo "🚢 Installing Kamal v${{ inputs.kamal-version }}..."
        gem install kamal -v ${{ inputs.kamal-version }}
        kamal version

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        install: true
        version: ${{ inputs.buildx-version }}

    - name: Configure Buildx
      shell: bash
      run: |
        echo "🐳 Configuring Docker Buildx..."
        if ! docker buildx version; then
          echo "❌ Error: Buildx not installed correctly"
          exit 1
        fi

        docker buildx create --name kamal-deploy-builder --driver docker-container --use 2>/dev/null || docker buildx use kamal-deploy-builder
        docker buildx inspect --bootstrap
        echo "✅ Buildx configured successfully"

    - name: Create Kamal secrets file
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔐 Creating Kamal secrets file..."
        mkdir -p .kamal
        secrets_file=".kamal/secrets.${{ inputs.environment }}"

        # Create secrets file with proper permissions
        touch "$secrets_file"
        chmod 600 "$secrets_file"

        # Base secrets
        cat <<EOF > "$secrets_file"
        KAMAL_REGISTRY_USERNAME=${KAMAL_REGISTRY_USERNAME}
        KAMAL_REGISTRY_PASSWORD=${KAMAL_REGISTRY_PASSWORD}
        RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
        DATABASE_HOST=${DATABASE_HOST}
        DATABASE_NAME=${DATABASE_NAME}
        DATABASE_USERNAME=${DATABASE_USERNAME}
        DATABASE_PASSWORD=${DATABASE_PASSWORD}
        DATABASE_PORT=${DATABASE_PORT}
        EOF

        # Add Rails host configuration if available
        if [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST}" ]]; then
          echo "RAILS_DEFAULT_PUBLIC_APP_HOST=${RAILS_DEFAULT_PUBLIC_APP_HOST}" >> "$secrets_file"
        fi

        if [[ -n "${RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL}" ]]; then
          echo "RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL=${RAILS_DEFAULT_PUBLIC_APP_HOST_PROTOCOL}" >> "$secrets_file"
        fi

        # Add Redis configuration if provided
        if [[ -n "${REDIS_USERNAME}" && -n "${REDIS_PASSWORD}" ]]; then
          echo "REDIS_USERNAME=${REDIS_USERNAME}" >> "$secrets_file"
          echo "REDIS_PASSWORD=${REDIS_PASSWORD}" >> "$secrets_file"
          echo "SIDEKIQ_REDIS_URL=redis://${REDIS_USERNAME}:${REDIS_PASSWORD}@${{ inputs.redis-host }}:${{ inputs.redis-port }}/${{ inputs.redis-database }}" >> "$secrets_file"
          echo "✅ Added Redis configuration with Sidekiq URL"
        fi

        # Add Mail configuration if provided
        if [[ -n "${MAIL_USERNAME}" && -n "${MAIL_PASSWORD}" ]]; then
          echo "MAIL_USERNAME=${MAIL_USERNAME}" >> "$secrets_file"
          echo "MAIL_PASSWORD=${MAIL_PASSWORD}" >> "$secrets_file"
          echo "✅ Added Mail server configuration"
        fi

        # Add AWS general secrets if provided
        if [[ -n "${AWS_ACCESS_KEY_ID}" ]]; then
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> "$secrets_file"
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> "$secrets_file"
          echo "AWS_REGION=${AWS_REGION}" >> "$secrets_file"
          echo "✅ Added AWS general configuration"
        fi

        # Add Frontend Integration if provided
        if [[ -n "${FRONTEND_APP_NAME}" ]]; then
          echo "FRONTEND_APP_NAME=${FRONTEND_APP_NAME}" >> "$secrets_file"
          echo "✅ Added Frontend integration configuration"
        fi

        # Add additional secrets if provided
        if [[ -n "${{ inputs.additional-secrets }}" ]]; then
          echo "" >> "$secrets_file"
          echo "# Additional project-specific secrets" >> "$secrets_file"
          echo "${{ inputs.additional-secrets }}" >> "$secrets_file"
          echo "✅ Added additional project-specific secrets"
        fi

        echo "✅ Secrets file created"

    - name: Get current deployment info
      id: current-deployment
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "📋 Getting current deployment information..."
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)

        # Get current version/container info for potential rollback
        if kamal ps -c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }} 2>/dev/null; then
          current_containers=$(kamal ps -c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }} 2>/dev/null | grep -v "CONTAINER" | head -1 | awk '{print $2}' || echo "none")
          echo "current-version=${current_containers}" >> $GITHUB_OUTPUT
          echo "ℹ️ Current running containers: ${current_containers}"
        else
          echo "current-version=none" >> $GITHUB_OUTPUT
          echo "ℹ️ No current deployment found"
        fi

    - name: Enable maintenance mode
      if: inputs.maintenance-mode == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🚧 Enabling maintenance mode..."
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)

        # Create a simple maintenance page if it doesn't exist
        if [[ ! -f "public/maintenance.html" ]]; then
          mkdir -p public
          cat <<EOF > public/maintenance.html
        <!DOCTYPE html>
        <html>
        <head>
          <title>Maintenance</title>
          <style>body { font-family: Arial; text-align: center; padding: 50px; }</style>
        </head>
        <body>
          <h1>🔧 Maintenance in Progress</h1>
          <p>We're updating the application. Please check back in a few minutes.</p>
        </body>
        </html>
        EOF
        fi

        # Enable maintenance mode (this would depend on your specific setup)
        echo "✅ Maintenance mode enabled"

    - name: Run pre-deploy commands
      if: inputs.pre-deploy-commands != ''
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔧 Running pre-deploy commands..."
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)
        ${{ inputs.pre-deploy-commands }}

    - name: Deploy with Kamal v2
      id: kamal-deploy
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🚀 Starting Kamal v2 deployment to ${{ inputs.environment }}..."

        # Load secrets
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)

        # Set deployment flags
        deploy_flags="-c ${{ inputs.kamal-config-path }} -d ${{ inputs.environment }}"

        # Add verbose flag if needed
        if [[ "${{ inputs.deployment-strategy }}" != "immediate" ]]; then
          deploy_flags="$deploy_flags --verbose"
        fi

        # Run deployment
        if kamal deploy $deploy_flags; then
          echo "✅ Kamal v2 deployment completed successfully for ${{ inputs.environment }}"
          echo "deploy_status=success" >> $GITHUB_OUTPUT

          # Get deployed version
          deployed_version=$(kamal app version -d ${{ inputs.environment }} 2>/dev/null | tail -n1 | tr -d '\n\r' | sed 's/[^a-zA-Z0-9._-]//g' || echo "unknown")
          if [[ -z "$deployed_version" || "$deployed_version" == *"INFO"* ]]; then
            deployed_version="unknown"
          fi
          echo "deployed_version=${deployed_version}" >> $GITHUB_OUTPUT
        else
          echo "❌ Kamal v2 deployment failed for ${{ inputs.environment }}"
          echo "deploy_status=failed" >> $GITHUB_OUTPUT
          echo "deployed_version=failed" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Wait for deployment to stabilize
      shell: bash
      run: |
        echo "⏳ Waiting for deployment to stabilize..."
        sleep 30

    - name: Verify deployment completion
      id: health-checks
      if: steps.kamal-deploy.outputs.deploy_status == 'success' && inputs.health-check-enabled == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "✅ Kamal deployment completed successfully"
        echo "🔍 Deployment verification:"
        
        # Load secrets for any needed commands
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)
        
        # Quick verification that deployment finished
        if kamal app details -d ${{ inputs.environment }} 2>/dev/null | grep -q "CONTAINER ID"; then
          echo "✅ Application containers are present"
          echo "health-status=passed" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Could not verify container presence"
          echo "health-status=failed" >> $GITHUB_OUTPUT
        fi

    - name: Disable maintenance mode
      if: inputs.maintenance-mode == 'true' && (success() || failure())
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🚧 Disabling maintenance mode..."
        # Disable maintenance mode (implementation depends on your setup)
        echo "✅ Maintenance mode disabled"

    - name: Run post-deploy commands
      if: inputs.post-deploy-commands != '' && success()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🔧 Running post-deploy commands..."
        export $(grep -v '^#' .kamal/secrets.${{ inputs.environment }} | xargs)
        ${{ inputs.post-deploy-commands }}

    - name: Handle deployment failure (simplified)
      id: rollback
      if: failure() && inputs.rollback-on-failure == 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "⚠️ Deployment failed. Rollback is disabled by default to prevent issues."
        echo "💡 To enable rollback, set rollback-on-failure to 'true' in your workflow."
        echo "⚠️ Manual rollback may be required - check your deployment logs."
        echo "rollback-performed=false" >> $GITHUB_OUTPUT

    - name: Set deployment result
      id: deploy-result
      if: always()
      shell: bash
      run: |
        # Determine final status based on deployment result
        if [[ "${{ steps.kamal-deploy.outputs.deploy_status }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
        fi

        # Set version and rollback status (clean up the version output)
        deployed_version="${{ steps.kamal-deploy.outputs.deployed_version }}"
        # Clean version string to prevent bash syntax errors
        clean_version=$(echo "$deployed_version" | head -n1 | tr -d '\n\r' | sed 's/[^a-zA-Z0-9._-]//g')
        if [[ -z "$clean_version" || "$clean_version" == *"INFO"* ]]; then
          clean_version="unknown"
        fi
        echo "version=${clean_version}" >> $GITHUB_OUTPUT
        echo "rollback=false" >> $GITHUB_OUTPUT
        echo "duration=0" >> $GITHUB_OUTPUT

    - name: Cleanup
      if: always()
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "🧹 Performing cleanup..."

        # Remove secrets file
        rm -f .kamal/secrets.${{ inputs.environment }}

        # Clean up Docker resources if deployment failed
        if [[ "${{ steps.deploy-result.outputs.status }}" != "success" ]]; then
          docker system prune -f 2>/dev/null || true
        fi

        echo "✅ Cleanup completed"

branding:
  icon: 'upload-cloud'
  color: 'purple'
