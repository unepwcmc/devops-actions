name: Test Kamal Actions (Validation Only)

on:
  workflow_dispatch:
    inputs:
      kamal_version:
        description: 'Kamal version to test'
        required: true
        type: choice
        options:
        - v1
        - v2
      app_type:
        description: 'Application type to test'
        required: true
        type: choice
        options:
        - backend
        - frontend

jobs:
  validate-action-structure:
    name: Validate Kamal ${{ inputs.kamal_version }} ${{ inputs.app_type }} Actions
    runs-on: self-hosted
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Action Files
        shell: bash
        run: |
          echo "🔍 Validating Kamal ${{ inputs.kamal_version }} ${{ inputs.app_type }} action files..."
          
          if [[ "${{ inputs.app_type }}" == "backend" ]]; then
            setup_action=".github/actions/kamal-${{ inputs.kamal_version }}-setup/action.yml"
            deploy_action=".github/actions/kamal-${{ inputs.kamal_version }}-deploy/action.yml"
          else
            setup_action=".github/actions/nuxt-kamal-${{ inputs.kamal_version }}-setup/action.yml"
            deploy_action=".github/actions/nuxt-kamal-${{ inputs.kamal_version }}-deploy/action.yml"
          fi
          
          echo "📋 Checking setup action: $setup_action"
          if [[ -f "$setup_action" ]]; then
            echo "✅ Setup action file exists"
            
            # Validate YAML syntax
            if python3 -c "import yaml; yaml.safe_load(open('$setup_action'))" 2>/dev/null; then
              echo "✅ Setup action YAML is valid"
            else
              echo "❌ Setup action YAML is invalid"
              exit 1
            fi
            
            # Check for required fields
            if grep -q "name:" "$setup_action" && grep -q "description:" "$setup_action" && grep -q "runs:" "$setup_action"; then
              echo "✅ Setup action has required metadata"
            else
              echo "❌ Setup action missing required metadata"
              exit 1
            fi
            
          else
            echo "❌ Setup action file not found"
            exit 1
          fi
          
          echo "📋 Checking deploy action: $deploy_action"
          if [[ -f "$deploy_action" ]]; then
            echo "✅ Deploy action file exists"
            
            # Validate YAML syntax
            if python3 -c "import yaml; yaml.safe_load(open('$deploy_action'))" 2>/dev/null; then
              echo "✅ Deploy action YAML is valid"
            else
              echo "❌ Deploy action YAML is invalid"
              exit 1
            fi
            
            # Check for required fields
            if grep -q "name:" "$deploy_action" && grep -q "description:" "$deploy_action" && grep -q "runs:" "$deploy_action"; then
              echo "✅ Deploy action has required metadata"
            else
              echo "❌ Deploy action missing required metadata"
              exit 1
            fi
            
          else
            echo "❌ Deploy action file not found"
            exit 1
          fi
          
          echo "🎉 Action file validation completed!"

      - name: Check Required Tools Availability
        shell: bash
        run: |
          echo "🔧 Checking required tools on runner..."
          
          tools_available=true
          
          # Check Ruby
          if command -v ruby &> /dev/null; then
            echo "✅ Ruby: $(ruby --version)"
          else
            echo "❌ Ruby not available"
            tools_available=false
          fi
          
          # Check Node.js
          if command -v node &> /dev/null; then
            echo "✅ Node.js: $(node --version)"
          else
            echo "❌ Node.js not available"
            tools_available=false
          fi
          
          # Check Docker
          if command -v docker &> /dev/null; then
            echo "✅ Docker: $(docker --version)"
          else
            echo "❌ Docker not available"
            tools_available=false
          fi
          
          # Check if we can install gems
          if command -v gem &> /dev/null; then
            echo "✅ Gem command available"
          else
            echo "❌ Gem command not available"
            tools_available=false
          fi
          
          # Check if we have access to install kamal
          if gem list kamal | grep -q kamal || echo "Testing gem install simulation"; then
            echo "✅ Can test Kamal installation"
          else
            echo "❌ Cannot test Kamal installation"
          fi
          
          if [[ "$tools_available" == "true" ]]; then
            echo "🎉 All required tools are available"
          else
            echo "⚠️  Some tools are missing, but validation can continue"
          fi

      - name: Test Kamal Installation
        shell: bash
        run: |
          echo "💎 Testing Kamal installation..."
          
          # Try to install kamal (or check if already installed)
          if command -v kamal &> /dev/null; then
            echo "✅ Kamal already installed: $(kamal version)"
          else
            echo "📦 Installing Kamal ${{ inputs.kamal_version == 'v1' && '1.8.2' || '2.5.3' }}..."
            
            # Install the specific version
            if [[ "${{ inputs.kamal_version }}" == "v1" ]]; then
              kamal_version="1.8.2"
            else
              kamal_version="2.5.3"
            fi
            
            # Test installation
            if gem install kamal --version "$kamal_version" --no-document; then
              echo "✅ Kamal $kamal_version installed successfully"
              echo "📋 Kamal version: $(kamal version)"
              echo "📚 Kamal help:"
              kamal help | head -5
            else
              echo "❌ Failed to install Kamal"
              exit 1
            fi
          fi

      - name: Create Test Configuration
        shell: bash
        run: |
          echo "📝 Creating test configuration files..."
          
          # Create test directories
          mkdir -p config test-project
          cd test-project
          
          # Create a basic deploy.yml for testing
          if [[ "${{ inputs.app_type }}" == "backend" ]]; then
            cat > config/deploy.yml << 'EOF'
          service: test-rails-app
          image: test-rails-app
          
          servers:
            web:
              - 192.168.1.100
          
          registry:
            server: ghcr.io
            username: test-user
            password:
              - KAMAL_REGISTRY_PASSWORD
          
          env:
            clear:
              DATABASE_URL: postgresql://user:pass@localhost:5432/test_db
              RAILS_MASTER_KEY: fake-master-key-for-testing
              RAILS_ENV: staging
          EOF
          else
            cat > config/deploy.yml << 'EOF'
          service: test-nuxt-app
          image: test-nuxt-app
          
          servers:
            web:
              - 192.168.1.100
          
          registry:
            server: ghcr.io
            username: test-user
            password:
              - KAMAL_REGISTRY_PASSWORD
          
          env:
            clear:
              NUXT_PUBLIC_API_BASE_URL: https://api.test.example.com
              NODE_ENV: production
          EOF
          fi
          
          # Create a basic Dockerfile
          cat > Dockerfile << 'EOF'
          FROM node:18-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm install
          COPY . .
          EXPOSE 3000
          CMD ["npm", "start"]
          EOF
          
          echo "✅ Test configuration files created"

      - name: Test Kamal Configuration Validation
        shell: bash
        working-directory: test-project
        run: |
          echo "🧪 Testing Kamal configuration validation..."
          
          # Test config validation without actually connecting
          if kamal config validate; then
            echo "✅ Kamal config validation passed"
          else
            echo "ℹ️  Kamal config validation failed (expected with test config)"
            echo "📋 This is normal for test configurations with fake servers"
          fi
          
          # Test other kamal commands that don't require server access
          echo "📚 Available Kamal commands:"
          kamal help
          
          echo "🔧 Kamal version info:"
          kamal version
          
          echo "🎉 Configuration testing completed!"

      - name: Cleanup Test Files
        if: always()
        shell: bash
        run: |
          echo "🧹 Cleaning up test files..."
          rm -rf test-project
          echo "✅ Cleanup completed"

  test-action-inputs:
    name: Test Action Input Validation
    runs-on: self-hosted
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test Action Input Validation
        shell: bash
        run: |
          echo "🧪 Testing action input validation..."
          
          # Create a script to test action validation logic
          cat > test_validation.py << 'EOF'
          import yaml
          import sys
          
          def test_action_inputs(action_file):
              """Test that action has reasonable input validation"""
              print(f"📋 Testing {action_file}")
              
              try:
                  with open(action_file, 'r') as f:
                      action = yaml.safe_load(f)
                  
                  # Check basic structure
                  required_fields = ['name', 'description', 'inputs', 'runs']
                  for field in required_fields:
                      if field not in action:
                          print(f"❌ Missing required field: {field}")
                          return False
                  
                  # Check inputs
                  inputs = action.get('inputs', {})
                  required_inputs = [
                      'kamal-version', 'ruby-version', 'ssh-private-key'
                  ]
                  
                  missing_inputs = []
                  for req_input in required_inputs:
                      if req_input not in inputs:
                          missing_inputs.append(req_input)
                  
                  if missing_inputs:
                      print(f"⚠️  Missing recommended inputs: {missing_inputs}")
                  else:
                      print("✅ All recommended inputs present")
                  
                  # Check for composite action
                  if action['runs']['using'] != 'composite':
                      print(f"⚠️  Action uses {action['runs']['using']} instead of composite")
                  else:
                      print("✅ Uses composite action format")
                  
                  # Check for steps
                  steps = action['runs'].get('steps', [])
                  if len(steps) < 3:
                      print(f"⚠️  Only {len(steps)} steps found, expected more for setup action")
                  else:
                      print(f"✅ Has {len(steps)} steps")
                  
                  return True
                  
              except Exception as e:
                  print(f"❌ Error reading action file: {e}")
                  return False
          
          # Test the relevant action
          app_type = "${{ inputs.app_type }}"
          kamal_version = "${{ inputs.kamal_version }}"
          
          if app_type == "backend":
              action_file = f".github/actions/kamal-{kamal_version}-setup/action.yml"
          else:
              action_file = f".github/actions/nuxt-kamal-{kamal_version}-setup/action.yml"
          
          print(f"🔍 Testing action: {action_file}")
          success = test_action_inputs(action_file)
          
          if success:
              print("🎉 Action input validation passed!")
          else:
              print("❌ Action input validation failed!")
              sys.exit(1)
          EOF
          
          python3 test_validation.py
          rm test_validation.py

  test-summary:
    needs: [validate-action-structure, test-action-inputs]
    if: always()
    name: Test Summary
    runs-on: self-hosted
    
    steps:
      - name: Display Test Results
        run: |
          echo "## 🧪 Kamal ${{ inputs.kamal_version }} ${{ inputs.app_type }} Validation Summary"
          echo ""
          echo "### Test Results:"
          
          if [[ "${{ needs.validate-action-structure.result }}" == "success" ]]; then
            echo "✅ Action Structure Validation: PASSED"
          else
            echo "❌ Action Structure Validation: FAILED"
          fi
          
          if [[ "${{ needs.test-action-inputs.result }}" == "success" ]]; then
            echo "✅ Input Validation: PASSED"
          else
            echo "❌ Input Validation: FAILED"
          fi
          
          echo ""
          echo "### Next Steps:"
          echo "1. ✅ Actions are structurally valid"
          echo "2. 🚀 Ready for integration testing with real credentials"
          echo "3. 📋 Test in consumer repository with staging environment"
          
          # Fail if any tests failed
          if [[ "${{ needs.validate-action-structure.result }}" == "failure" ]] || [[ "${{ needs.test-action-inputs.result }}" == "failure" ]]; then
            echo "❌ Some validation tests failed!"
            exit 1
          fi
          
          echo "🎉 All validation tests passed! Actions are ready for use." 